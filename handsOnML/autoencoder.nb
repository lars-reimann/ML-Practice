(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    234680,       4348]
NotebookOptionsPosition[    232589,       4305]
NotebookOutlinePosition[    232932,       4320]
CellTagsIndexPosition[    232889,       4317]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[BoxData[
 RowBox[{"?", " ", "*Layer"}]], "Input",
 CellChangeTimes->{{3.7736504081122737`*^9, 3.7736504123982663`*^9}},
 CellLabel->"In[97]:=",ExpressionUUID->"93d8efce-b5c1-4ab6-84da-b37a0ac5b8fd"],

Cell[BoxData[
 StyleBox[
  FrameBox[GridBox[{
     {
      DynamicModuleBox[{Typeset`open$$ = True}, 
       PaneSelectorBox[{False->
        ButtonBox[
         RowBox[{
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEBitmaps", "RightPointerOpener"]], " ", 
          StyleBox["System`", "InformationGridGroupHeader"]}],
         Appearance->None,
         BaseStyle->"InformationGridLink",
         ButtonFunction:>FEPrivate`Set[Typeset`open$$, True],
         Evaluator->Automatic,
         Method->"Preemptive"], True->
        PaneBox[GridBox[{
           {
            ButtonBox[
             RowBox[{
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], " ", 
              StyleBox["System`", "InformationGridGroupHeader"]}],
             Appearance->None,
             BaseStyle->"InformationGridLink",
             ButtonFunction:>FEPrivate`Set[Typeset`open$$, False],
             Evaluator->Automatic,
             Method->"Preemptive"]},
           {
            PaneBox[GridBox[{
               {
                ButtonBox[
                 StyleBox["AggregationLayer", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-890e161d-5884-45c9-87a6-e0a1624aad1c", {
                   "AggregationLayer", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["ContrastiveLossLayer", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-890e161d-5884-45c9-87a6-e0a1624aad1c", {
                   "ContrastiveLossLayer", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["EmbeddingLayer", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-890e161d-5884-45c9-87a6-e0a1624aad1c", {
                   "EmbeddingLayer", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["MeanAbsoluteLossLayer", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-890e161d-5884-45c9-87a6-e0a1624aad1c", {
                   "MeanAbsoluteLossLayer", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["ReshapeLayer", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-890e161d-5884-45c9-87a6-e0a1624aad1c", {
                   "ReshapeLayer", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["SummationLayer", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-890e161d-5884-45c9-87a6-e0a1624aad1c", {
                   "SummationLayer", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["AppendLayer", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-890e161d-5884-45c9-87a6-e0a1624aad1c", {
                   "AppendLayer", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["ConvolutionLayer", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-890e161d-5884-45c9-87a6-e0a1624aad1c", {
                   "ConvolutionLayer", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["ExtractLayer", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-890e161d-5884-45c9-87a6-e0a1624aad1c", {
                   "ExtractLayer", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["MeanSquaredLossLayer", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-890e161d-5884-45c9-87a6-e0a1624aad1c", {
                   "MeanSquaredLossLayer", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["ResizeLayer", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-890e161d-5884-45c9-87a6-e0a1624aad1c", {
                   "ResizeLayer", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["ThreadingLayer", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 ButtonData:>{
                  "Info-890e161d-5884-45c9-87a6-e0a1624aad1c", {
                   "ThreadingLayer", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["AttentionLayer", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-890e161d-5884-45c9-87a6-e0a1624aad1c", {
                   "AttentionLayer", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["CrossEntropyLossLayer", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-890e161d-5884-45c9-87a6-e0a1624aad1c", {
                   "CrossEntropyLossLayer", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["FlattenLayer", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-890e161d-5884-45c9-87a6-e0a1624aad1c", {
                   "FlattenLayer", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["NormalizationLayer", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-890e161d-5884-45c9-87a6-e0a1624aad1c", {
                   "NormalizationLayer", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["SequenceAttentionLayer", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-890e161d-5884-45c9-87a6-e0a1624aad1c", {
                   "SequenceAttentionLayer", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["TotalLayer", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-890e161d-5884-45c9-87a6-e0a1624aad1c", {
                   "TotalLayer", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["BasicRecurrentLayer", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-890e161d-5884-45c9-87a6-e0a1624aad1c", {
                   "BasicRecurrentLayer", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["CTCLossLayer", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-890e161d-5884-45c9-87a6-e0a1624aad1c", {
                   "CTCLossLayer", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["GatedRecurrentLayer", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-890e161d-5884-45c9-87a6-e0a1624aad1c", {
                   "GatedRecurrentLayer", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["OrderingLayer", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-890e161d-5884-45c9-87a6-e0a1624aad1c", {
                   "OrderingLayer", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["SequenceLastLayer", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-890e161d-5884-45c9-87a6-e0a1624aad1c", {
                   "SequenceLastLayer", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["TransposeLayer", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-890e161d-5884-45c9-87a6-e0a1624aad1c", {
                   "TransposeLayer", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["BatchNormalizationLayer", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-890e161d-5884-45c9-87a6-e0a1624aad1c", {
                   "BatchNormalizationLayer", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["DeconvolutionLayer", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-890e161d-5884-45c9-87a6-e0a1624aad1c", {
                   "DeconvolutionLayer", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["ImageAugmentationLayer", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-890e161d-5884-45c9-87a6-e0a1624aad1c", {
                   "ImageAugmentationLayer", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["PaddingLayer", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-890e161d-5884-45c9-87a6-e0a1624aad1c", {
                   "PaddingLayer", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["SequenceMostLayer", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-890e161d-5884-45c9-87a6-e0a1624aad1c", {
                   "SequenceMostLayer", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["UnitVectorLayer", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-890e161d-5884-45c9-87a6-e0a1624aad1c", {
                   "UnitVectorLayer", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["CatenateLayer", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 ButtonData:>{
                  "Info-890e161d-5884-45c9-87a6-e0a1624aad1c", {
                   "CatenateLayer", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["DotLayer", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-890e161d-5884-45c9-87a6-e0a1624aad1c", {
                   "DotLayer", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 
                 StyleBox["InstanceNormalizationLayer", 
                  "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-890e161d-5884-45c9-87a6-e0a1624aad1c", {
                   "InstanceNormalizationLayer", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["PartLayer", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-890e161d-5884-45c9-87a6-e0a1624aad1c", {
                   "PartLayer", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["SequenceRestLayer", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-890e161d-5884-45c9-87a6-e0a1624aad1c", {
                   "SequenceRestLayer", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], ""},
               {
                ButtonBox[
                 StyleBox["ConstantArrayLayer", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-890e161d-5884-45c9-87a6-e0a1624aad1c", {
                   "ConstantArrayLayer", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["DotPlusLayer", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-890e161d-5884-45c9-87a6-e0a1624aad1c", {
                   "DotPlusLayer", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["LinearLayer", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-890e161d-5884-45c9-87a6-e0a1624aad1c", {
                   "LinearLayer", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["PoolingLayer", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-890e161d-5884-45c9-87a6-e0a1624aad1c", {
                   "PoolingLayer", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["SequenceReverseLayer", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-890e161d-5884-45c9-87a6-e0a1624aad1c", {
                   "SequenceReverseLayer", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], ""},
               {
                ButtonBox[
                 StyleBox["ConstantPlusLayer", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-890e161d-5884-45c9-87a6-e0a1624aad1c", {
                   "ConstantPlusLayer", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["DropoutLayer", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-890e161d-5884-45c9-87a6-e0a1624aad1c", {
                   "DropoutLayer", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 
                 StyleBox["LocalResponseNormalizationLayer", 
                  "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-890e161d-5884-45c9-87a6-e0a1624aad1c", {
                   "LocalResponseNormalizationLayer", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["PrependLayer", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-890e161d-5884-45c9-87a6-e0a1624aad1c", {
                   "PrependLayer", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["SoftmaxLayer", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-890e161d-5884-45c9-87a6-e0a1624aad1c", {
                   "SoftmaxLayer", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], ""},
               {
                ButtonBox[
                 StyleBox["ConstantTimesLayer", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-890e161d-5884-45c9-87a6-e0a1624aad1c", {
                   "ConstantTimesLayer", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["ElementwiseLayer", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-890e161d-5884-45c9-87a6-e0a1624aad1c", {
                   "ElementwiseLayer", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["LongShortTermMemoryLayer", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-890e161d-5884-45c9-87a6-e0a1624aad1c", {
                   "LongShortTermMemoryLayer", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["ReplicateLayer", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-890e161d-5884-45c9-87a6-e0a1624aad1c", {
                   "ReplicateLayer", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], 
                ButtonBox[
                 
                 StyleBox["SpatialTransformationLayer", 
                  "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 ButtonData:>{
                  "Info-890e161d-5884-45c9-87a6-e0a1624aad1c", {
                   "SpatialTransformationLayer", "System`"}, False},
                 ButtonNote->"System`",
                 Evaluator->Automatic], ""}
              },
              DefaultBaseStyle->"Text",
              
              GridBoxAlignment->{
               "Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
              GridBoxItemSize->{"Columns" -> {{
                   Scaled[0.15833333333333333`]}}}],
             ImageMargins->{{10, 0}, {0, 2}}]}
          },
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
         FrameMargins->{{0, 0}, {8, 0}}]}, Dynamic[Typeset`open$$],
        ImageSize->Automatic]]}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
    GridBoxDividers->{"ColumnsIndexed" -> {{False}}, "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.5599999999999999]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.8]}, 
        Offset[0.2]}}],
   BaseStyle->"InformationTitleFrame"], "InformationGridPlain"]], "Output",
 CellChangeTimes->{3.773650412802245*^9},
 CellLabel->"Out[97]=",ExpressionUUID->"8e588a36-18a7-400b-aa07-0878b24e34ac"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"moon", " ", "=", " ", 
   RowBox[{"ImageResize", "[", 
    RowBox[{
     NamespaceBox["LinguisticAssistant",
      DynamicModuleBox[{Typeset`query$$ = "Image of Moon", Typeset`boxes$$ = 
       RowBox[{
         TemplateBox[{"\"Moon\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"PlanetaryMoon\"", ",", "\"Moon\""}], "]"}], 
           "\"Entity[\\\"PlanetaryMoon\\\", \\\"Moon\\\"]\"", 
           "\"planetary moon\""}, "Entity"], "[", 
         TemplateBox[{"\"image\"", 
           RowBox[{"EntityProperty", "[", 
             RowBox[{"\"PlanetaryMoon\"", ",", "\"Image\""}], "]"}], 
           "\"EntityProperty[\\\"PlanetaryMoon\\\", \\\"Image\\\"]\""}, 
          "EntityProperty"], "]"}], Typeset`allassumptions$$ = {}, 
       Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, 
       Typeset`querystate$$ = {
       "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
        1.8110313`7.709470949773486, "Messages" -> {}}}, 
       DynamicBox[ToBoxes[
         AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, 
          Dynamic[Typeset`query$$], 
          Dynamic[Typeset`boxes$$], 
          Dynamic[Typeset`allassumptions$$], 
          Dynamic[Typeset`assumptions$$], 
          Dynamic[Typeset`open$$], 
          Dynamic[Typeset`querystate$$]], StandardForm],
        ImageSizeCache->{252., {11., 20.}},
        TrackedSymbols:>{
         Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, 
          Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],
       DynamicModuleValues:>{},
       UndoTrackedVariables:>{Typeset`open$$}],
      BaseStyle->{"Deploy"},
      DeleteWithContents->True,
      Editable->False,
      SelectWithContents->True], ",", 
     RowBox[{"{", 
      RowBox[{"64", ",", "64"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"earth", "=", 
   RowBox[{"ImageResize", "[", 
    RowBox[{
     NamespaceBox["LinguisticAssistant",
      DynamicModuleBox[{Typeset`query$$ = "Image of Earth", Typeset`boxes$$ = 
       RowBox[{
         TemplateBox[{"\"Earth\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"Planet\"", ",", "\"Earth\""}], "]"}], 
           "\"Entity[\\\"Planet\\\", \\\"Earth\\\"]\"", "\"planet\""}, 
          "Entity"], "[", 
         TemplateBox[{"\"image\"", 
           RowBox[{"EntityProperty", "[", 
             RowBox[{"\"Planet\"", ",", "\"Image\""}], "]"}], 
           "\"EntityProperty[\\\"Planet\\\", \\\"Image\\\"]\""}, 
          "EntityProperty"], "]"}], 
       Typeset`allassumptions$$ = {{
        "type" -> "MultiClash", "word" -> "", "template" -> 
         "Assuming ${word1} is referring to ${desc1}. Use \"${word2}\" as \
${desc2}. Use \"${word3}\" as ${desc3}.", "count" -> "3", 
         "Values" -> {{
           "name" -> "Planet", "word" -> "Earth", "desc" -> "a planet", 
            "input" -> "*MC.%7E-_*Planet-"}, {
           "name" -> "Country", "word" -> "Earth", "desc" -> "all countries", 
            "input" -> "*MC.%7E-_*Country-"}, {
           "name" -> "WordData", "word" -> "", "desc" -> 
            " referring to English words", "input" -> 
            "*MC.%7E-_*WordData-"}}}}, Typeset`assumptions$$ = {}, 
       Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {
       "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
        1.5230327`7.634254221373776, "Messages" -> {}}}, 
       DynamicBox[ToBoxes[
         AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, 
          Dynamic[Typeset`query$$], 
          Dynamic[Typeset`boxes$$], 
          Dynamic[Typeset`allassumptions$$], 
          Dynamic[Typeset`assumptions$$], 
          Dynamic[Typeset`open$$], 
          Dynamic[Typeset`querystate$$]], StandardForm],
        ImageSizeCache->{223., {11., 20.}},
        TrackedSymbols:>{
         Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, 
          Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],
       DynamicModuleValues:>{},
       UndoTrackedVariables:>{Typeset`open$$}],
      BaseStyle->{"Deploy"},
      DeleteWithContents->True,
      Editable->False,
      SelectWithContents->True], ",", 
     RowBox[{"{", 
      RowBox[{"64", ",", "64"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"{", 
    RowBox[{"moon", ",", "earth", ",", 
     RowBox[{"ImageRotate", "[", "moon", "]"}], ",", 
     RowBox[{"ImageRotate", "[", "earth", "]"}]}], "}"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.773650419881266*^9, 3.7736504307612476`*^9}, {
  3.773651128310583*^9, 3.7736511555775447`*^9}, {3.773652119201544*^9, 
  3.7736521299686627`*^9}, {3.773652312800542*^9, 3.77365234844759*^9}},
 CellLabel->
  "In[187]:=",ExpressionUUID->"bc02aa7a-22f6-4a1d-a74a-653addc50471"],

Cell[BoxData[
 RowBox[{
  RowBox[{"encoder", "=", 
   RowBox[{"NetEncoder", "[", 
    RowBox[{"{", 
     RowBox[{"\"\<Image\>\"", ",", " ", 
      RowBox[{"{", 
       RowBox[{"64", ",", "64"}], "}"}]}], "}"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.773650437665213*^9, 3.773650480876276*^9}, {
   3.7736505723735533`*^9, 3.7736505842135954`*^9}, {3.773650679919587*^9, 
   3.77365069381057*^9}, {3.7736509226805935`*^9, 3.7736509258955436`*^9}, 
   3.7736523955456004`*^9},
 CellLabel->
  "In[194]:=",ExpressionUUID->"e7a20602-7eeb-4a8e-bc9b-aa03c10e5cb8"],

Cell[BoxData[
 RowBox[{
  RowBox[{"decoder", "=", 
   RowBox[{"NetDecoder", "[", 
    RowBox[{"{", "\"\<Image\>\"", "}"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7736506124746084`*^9, 3.773650656538546*^9}, 
   3.773652398085579*^9},
 CellLabel->
  "In[193]:=",ExpressionUUID->"18608ae9-4961-49ee-bc48-01c661dda598"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"model", "=", 
  RowBox[{
   RowBox[{"NetChain", "[", 
    RowBox[{
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"LinearLayer", "[", "10", "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"DropoutLayer", "[", "0.1", "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"ElementwiseLayer", "[", "\"\<ELU\>\"", "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"LinearLayer", "[", 
        RowBox[{"{", 
         RowBox[{"3", ",", " ", "64", ",", "64"}], "}"}], "]"}]}], 
      "\[IndentingNewLine]", "}"}], ",", " ", 
     RowBox[{"\"\<Input\>\"", "\[Rule]", "encoder"}], ",", 
     RowBox[{"\"\<Output\>\"", "\[Rule]", "decoder"}]}], "]"}], "//", 
   "NetInitialize"}]}]], "Input",
 CellChangeTimes->{{3.7736507046355715`*^9, 3.773650854534556*^9}, {
  3.773650936524609*^9, 3.7736509399615583`*^9}, {3.7736512963735857`*^9, 
  3.7736513631856065`*^9}, {3.773651739326597*^9, 3.7736517398025436`*^9}, {
  3.773651788308605*^9, 3.7736517902355704`*^9}, {3.7736519566085787`*^9, 
  3.7736519567435465`*^9}, {3.7736520280786*^9, 3.773652028623559*^9}, {
  3.7736520877196035`*^9, 3.773652089338606*^9}, {3.7736524171655436`*^9, 
  3.7736524553725977`*^9}, {3.7736530064855447`*^9, 3.77365301218661*^9}, {
  3.773653050014544*^9, 3.7736530503325443`*^9}},
 CellLabel->
  "In[231]:=",ExpressionUUID->"9532a2dd-f5f0-4a70-bfce-b7bb035e7cad"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["4", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{10, 12288}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{10}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {10}, "$OutputSize" -> 10, 
                    "$InputSize" -> 12288, "$InputDimensions" -> {3, 64, 64}],
                     "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "DropoutProbability" -> 0.1, "Method" -> "Dropout"], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {10}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{12288, 10}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{12288}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {3, 64, 64}, "$OutputSize" -> 12288,
                     "$InputSize" -> 10, "$InputDimensions" -> {10}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{3, 64, 64}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    Association[
                    "Form" -> NeuralNetworks`TensorT[{3, 64, 64}, 
                    NeuralNetworks`RealT], "Type" -> "Image", 
                    "ImageSize" -> {64, 64}, "ColorSpace" -> "RGB", 
                    "ColorChannels" -> 3, "Interleaving" -> False, 
                    "MeanImage" -> None, "VarianceImage" -> None, "$Version" -> 
                    "12.0.10"]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    Association[
                    "Form" -> NeuralNetworks`TensorT[{3, 64, 64}, 
                    NeuralNetworks`RealT], "Type" -> "Image", "ColorSpace" -> 
                    "RGB", "Interleaving" -> False, "MeanImage" -> None, 
                    "VarianceImage" -> None, "$Dimensions" -> {64, 64}, 
                    "$Channels" -> 3, "$Version" -> "12.0.10"]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"64\"", "\"64\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["DropoutLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    RowBox[{"\"ExponentialLinearUnit\"", "[", 
                    StyleBox["\"x\"", Italic, StripOnInput -> False], "]"}], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"64\"", "\"64\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"image\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.773650728319578*^9, 3.773650774337573*^9}, 
   3.7736508082125854`*^9, 3.773650855649578*^9, {3.7736509299935436`*^9, 
   3.7736509440805454`*^9}, {3.7736513418375425`*^9, 3.7736513638085475`*^9}, 
   3.7736517404775486`*^9, 3.7736517913035717`*^9, 3.7736519575665417`*^9, 
   3.773652029781596*^9, 3.773652090115546*^9, 3.7736521980835443`*^9, {
   3.773652402513545*^9, 3.7736524183965454`*^9}, 3.773652456607547*^9, 
   3.773653012992544*^9, 3.773653069943545*^9},
 CellLabel->
  "Out[231]=",ExpressionUUID->"c989f305-d313-440d-8906-24a6bd0ebea8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trained", "=", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"model", ",", 
    RowBox[{"data", "\[Rule]", "data"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.773651007651596*^9, 3.7736510960526004`*^9}, {
  3.7736511713416033`*^9, 3.773651178003545*^9}, {3.773652202115595*^9, 
  3.7736522093685455`*^9}, {3.7736522414296055`*^9, 3.7736522749205604`*^9}, {
  3.773652353089591*^9, 3.773652355390551*^9}},
 CellLabel->
  "In[232]:=",ExpressionUUID->"a7046324-32a8-4fa2-9f25-032f2ec05800"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["4", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{10, 12288}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{10}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {10}, "$OutputSize" -> 10, 
                    "$InputSize" -> 12288, "$InputDimensions" -> {3, 64, 64}],
                     "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "DropoutProbability" -> 0.1, "Method" -> "Dropout"], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1]}, 
                    NeuralNetworks`Private`ScalarSymbol[2], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[2] -> {
                    "ExponentialLinearUnit", 
                    NeuralNetworks`Private`ScalarSymbol[1]}]]], 
                    "$Dimensions" -> {10}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{12288, 10}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{12288}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {3, 64, 64}, "$OutputSize" -> 12288,
                     "$InputSize" -> 10, "$InputDimensions" -> {10}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{3, 64, 64}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    Association[
                    "Form" -> NeuralNetworks`TensorT[{3, 64, 64}, 
                    NeuralNetworks`RealT], "Type" -> "Image", 
                    "ImageSize" -> {64, 64}, "ColorSpace" -> "RGB", 
                    "ColorChannels" -> 3, "Interleaving" -> False, 
                    "MeanImage" -> None, "VarianceImage" -> None, "$Version" -> 
                    "12.0.10"]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    Association[
                    "Form" -> NeuralNetworks`TensorT[{3, 64, 64}, 
                    NeuralNetworks`RealT], "Type" -> "Image", "ColorSpace" -> 
                    "RGB", "Interleaving" -> False, "MeanImage" -> None, 
                    "VarianceImage" -> None, "$Dimensions" -> {64, 64}, 
                    "$Channels" -> 3, "$Version" -> "12.0.10"]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"64\"", "\"64\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["DropoutLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    RowBox[{"\"ExponentialLinearUnit\"", "[", 
                    StyleBox["\"x\"", Italic, StripOnInput -> False], "]"}], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"64\"", "\"64\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"image\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.7736510716445937`*^9, 3.7736510970195713`*^9}, 
   3.7736511989935427`*^9, 3.773651411649591*^9, {3.7736517782705426`*^9, 
   3.773651804864544*^9}, 3.773651967075577*^9, 3.7736521010215445`*^9, 
   3.773652218487545*^9, {3.773652267168544*^9, 3.773652283567594*^9}, 
   3.773652364508544*^9, {3.7736524080635424`*^9, 3.7736524300145903`*^9}, 
   3.7736524883355436`*^9, 3.773653058425543*^9, 3.773653101136543*^9},
 CellLabel->
  "Out[232]=",ExpressionUUID->"df061863-627c-4ca0-bc3a-e24b4f46ca7c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trained", "[", "earth", "]"}]], "Input",
 CellChangeTimes->{{3.773652369165549*^9, 3.7736523720875907`*^9}},
 CellLabel->
  "In[233]:=",ExpressionUUID->"3683877b-9e6a-44ac-8b15-96e436d5785c"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
1Jz//9S5yfpqzfSu6pp389VNP8PUd6Qr+MIrUrUE8wWXk0FqydDl3NZBDhwz
X8sn8pFcioEgROut5qSPE0VutChq78SIlks+Ce1BYonLgUK+yXsXl587LDTr
9mU+NrpeaPr3L75qxFtO+6NPqLbwqlh72o1rtQrj5TbJfNT5lWI0DhQ1Xit1
+TSbl9905aTRA/mcA9P41D79Qy33RYmy+Eax6Im9mKU8JigffylesKaLIEh+
CY64KrS85byQq7eVz7n1S7j6Za1ilGyj4tjvw4qVbias7ZmUbdnSgWX7bVfM
ictUfOu/ReFWuUHx68geRUHWXkXBX3sVn50OK1Yt36owC1usMKS1iuGKfxTq
2imKwy//UHS2/1sxLCRb0dV2j8Ipca+iaMmIs5kmg89qpoWfLZI3s/prNUx6
ooYlNvWCWvtgUL5QQl2O7pznhoF26QBY0LcL1Dd0gcLfrrBAtIbmw1ZQnmwD
NUd+M6HyN5OnWECutQxSdXXfYitoeucD0mQn2MB8obRYD7K99SCxoz5o13xl
KXNamLaymfn21LLkSc+YskTLqqbVMKHwAUs/FwRofh1cTtbB2XYzbLEcj8kt
U9D0fhrO/7ENP8TsQgvNaYy/WYzMpxRrLzzFcPE/PJJ8FTmXz+g69gYW/XMH
K6p/4Pe621g3+gH+7fYbP4+/hCfzr+Hkgw1YfOQwtp06jR+Ol+MQ6UJMS12F
/Wu347mhCvzedQDWjZiFGkU1aGbVw9pqO0wJN4X4Uk9gwdMh5a9XrKr6Javq
XMc0X16xrJTXLDr7FWt9qQeWPnqg7FPPTmvlULGoO5jNkkPa4X6gnNEP0qA/
lCaNgcS5Y8Hw43TgPvaH2Mcx0J44ErIlcVDWNw5KdyVC0a9xUNF7PLT+lwj5
t+ZD/e4EqHqXAI4mUsi894Upl3xhkkDbs/IFJmeVqU/VY/tsV/Tbma0Qvu9S
FHycoPj+eIpiR/twxdTY/ymG+GUojLsuUuhHpSkKxq5RdGjJVJgqDirk+zIU
Q65vVOw5tFnBt2xTpJUcUiw0yFM8G7NTEb9lh8Lo+gyF78Y/FedvLFNo/8zm
Wnt3EhPnjBSrDj3mNRcHivFPToqtCzaLsm2bBOXsQ1xW0DBOdt+El/5jxme2
WQiZ1flCvN0RPnbY3tDmK8t5LjFTjB41Uyz/3/lQWcBdQfW/GD4nJShUdfiB
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
9Rcx7d1aPvOtLRf813Ze+/ujkKjtxyeEm3H5/X9w8q9VnPTVAzF98gK1vCVF
HVjXR839cVlMzh4sxn7pIkpL/2WtNf+yDN2eX/iV1fT9wrKMm1mO+Q/G8s2g
5nob05heYtFTnEE1+jlzHKTL9D/MQaPjwOpdLpA12R+iDbpA61V38Mpyh4rR
DGwP6tOt3/rUrLAlo7p+JNNxyc38GOrTylPWlkBqnxtO83t3o4xiT4q4G0JB
qz3odKMjjdL609iVtvSryoxWnHOlrAIjiq36hc3jrOj6j0+YJH+PD9w7UPyH
Z7ji7iO8s6kdJ1j8h83VF/D0kDr0mlSMa6eJePDzIzSMKEL7fqdw4oqbmHvk
CM7fUYT9O1zFxrvHMPPoaQz5+za6pp7B2RdFnGn1ENsPnUBbpYAL11XhOT81
rp10Ab8Z6Wa+yUdMb/iE486bkVd6B5pbaEIzZznTqzNSSnhkTDMvOtCo2VZU
/mcn6tJZRjbHu5CszpkOfdV9l4fWZDnbgjKq3Mi9xZZidIxvZupBY+e5kDa2
M2XpMk3UpFvoPLka6ws+46IN69A5ZReavT+PK7+l42fXPVg56DK+y1uD5dd2
46PfV3FW1l7cdeUoJn27h8qg/bgh6gxuOv8MUxefwNzNV9A4/jOejShGH1U5
ui5qwerV57G8VxVGxP/G01sOYfB1Abu2vcd3ahEvXy1H+cN2/DG2Gv8Z+BLl
e03obGAQjVP2pJ1/DaCcUYE0fG138opU0XeT92g64QsmFluT/tz76LrwBdoO
l5JNcj7qK07hfNtqDLFfDT3vZMDMqzkg2/EHaL8kgLZmFMiSh0N66QhoDhsB
ypMcVD/loMGEB98VUdD6YBBszYmC6m0LIXnWQjBcmwJVU48xw6ajTKg7ynw7
H+RqF2wR668YhMX2XKau/+sftePkg+r06iElp5evEFOcego5E1YJjgajeUN7
Vz76aS8x6sxoMbHluuh1z1+dPnmnWnbrgDo2e4Cged1fSPwnqeSOk2Epp+dQ
2tLRvNQ38wFTGdYwzbwHLCZNAnEz9KChTA+48WZgyCygfLkZpKhrmeX4Hyze
pyMoF3eG/Cx/CJ4dCZqJl5jqdRnT9L7MzPYLaNwiIMnu4L7RSkrLVlBY/mg6
t7kbmcq96HYkkZPGiwzHdKa0Kd3pw05TGudlTM9Hu1DUxQZM/Pwaxx41pc3+
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
PvZmjRcmMZtGF+Z8ehJLPejAol3GsQARdxatosv8mnRZ/VVFJiQnysrParKD
7qYs+rY4XeqRpmE/PTKzkiU3a2U6vdaK5seI08Z3MiRBhnRTHbS9cQpZJy+m
3eo69PqdPmnu5Ki7LQ87FleiadowPMtqEezWBLv9gjSj7wNu7PyCh33SlCw+
gIUH/yLsmALleGdAUzcXf/42wM9IjH4clqRNN7UIT7TpTc04KvSwpTwFAerb
IkzX3miSRko5AuIewtTnF25qXoKf4y0s+NSM/glXUNOXjVljX+LZzXL4Sz9C
0ZJvcJjyA18+/oWluSx5vU7GevM0OF2uRYR7GQJXPER3zSdkn/6LdU5CVGGm
SL/F7Sij346yN02hmRfXkfq19VQuFEzu27aQ/qEtVMC7gv1CKPlQCHXu3EL9
XetIXHg9qb1aTy2Hg6j+ZhBtiQkisx1bqPvIFrKKCaH+4tVkmulHQmv9qcPa
kwyFF1K7y1IaEDEnyRhL0h0LWnFFht7aKdP3NCN6G5gG+/t5OBD3HGVTYxBi
cgn5f++iWaAaH+qa0H9+GGp/32CO0FcsXiHC21O/EZwgQLk+8jRuQQVStj9C
9Y4O1E0UoO6jY+hYijwpS7/ldf0XzF4qSKciwmGreAKHdW/j2blbUMwpRoZ4
G/pnLofYtO24rJCI6O+88x6VIo2t2tSQ0gedqfxUeVSBxn7YA7lfp7H+VxG8
zkfgAd8FcNMfYGNqIn4sz4FN+RskCF7GUqlc/PB9g4VB7+C1twdtf8So+uM9
WMs/QXRZN3Q3h2C60kH4TotBta0xc2cmLCzKkdkIhrDAJj/mWr2GJfw1Y7uG
zZhfgxOTDdJhYYXarFnBjM16OJ9lnZnHnFMXMKG56ZzHzHTO52I6p7FxLRcW
tJrzu+3H8T13YFnijqzezJM1iDmw4b1urC3KnrU32rGEayaMz3wq07/ryVID
prFuaXfWtnyE69v0mxP9/o8TF34OlU2vEW09AN0140khwZRqP7qRo84Y6l0i
SRrC40gwkKOQyVPoxeUF5PzOia5kEFX2eVK0XAXqZzyB9uO/CNCqQmftM1S3
/oP3FnkK+6NMN9Qs6NGbKaR02Y0mRS6n0e+65PvdkFQmO1KB9wgmTeSnNDN5
ujFOghrdpWnhVl2S7W+H1/oeuL+WpdeG57HO6BJSRJ7hg8IRpNqcxTbVe9jz
cx9qgk7il/1tVJ3g+Ud5D/KqRMnV9ztavv/BWTEZem8mQNsixlDMi7GktV+e
RHuV6dJ8I7oW9wpHTdqx8Rw/ZbdVQqDuCdxWdcHZR532ntYi0/EmtGzJImr4
u5RkVq0iq+1raNqWtRRkE0gS67wp0H4F3alfRc1LNtMO3q7wnraFpPw305k9
m8l+bgh5lWyijNebKF18E0WObKYwiRBa1r6Zmj0XUoHCYhrX4kvbeJ9JrEeL
rky14uXlNfraP+O8sSCFnirFccVatM7vQffhzYDifqz/eROOaMO2ji8okxMh
xenKFHZTjQwPGtOUJbLk/kqBzrzWofDHhiRtOYFSau2oUcCYsvomUuAE4p3z
Efw3dAaBo3fQYpmDD9vuoftNO+ylcqCz4x6Ggj6h99B97H/3BOEHh5Asb0ZD
X2woyH0a7bodg4CVVzC1mddBU4MR+zQKjetzcPLsEbg1J+Lx7Go4dWRg/pUK
bBvtwthfr6GQ34WlE8aQ/u5b+CRZDIu+F6j6zxKSa1zxNNAHnYGjXHXKKJd1
4y+XunYi80scx3w8xrHmDkMmtHA8a+20YbGTlVmk+ljmrqLPohc7MdFXjqw1
2pEF/reY85g9j0soXcAND1iVhKZZlgTEi5WofOWx02N9dnDxEpYsNIlFBs1j
nc9sWdhEUxbrrsUS/CewALcZzF6fY36mM9isNEvWuMCKhYpYsuZ5G2HaHwqT
xGjUpdtQua49rdzlQVp2JiS8ZSI1fnSmsyvm0/QBL4p7uoY+vQdZ+riQEbeQ
fEWfYPz61/juKcDbEr953M9PbSuU6M2Fp0iZ1IKdhwRo/4NieM25h67YLlgt
eY7wry1Y4fUHuSk/YGj2C1JxYhSgM4p0B0Fq41egqjM8di4UpahJmuRWvQc/
rI5Afkkmnn9agaW5/0F6x0XcXB+N5a8S4KVZhOcjA5D5j4+CJsiRj5wKBctr
0ZsycxIxV6TjW8ZSw1ojwmxNGszToWmtE2lJtBytFlGiozN5juPbjRLNITxa
IkZRpqchO/4S+q7xdnTEKExNBGhXswR1Wc6hvDdz6cl2L7K57kMfCnxIZJEf
DfwIJs/fm2kxb8ZnyQTTbP3NNF99M5WMC6EvniG0yWkzVcotp/OVK2h99xpK
napEo2dVKaDZmJo/SpJ2mwI9HWdEOy1f4XhdO9qzBEjo4x0EmlXAduQ9ng2K
Up+ANGV/1aZPj8So3kKalrpoUkGBLoX7GNA8dxtafFOdns3TosvjJ9LyvTpU
/0qfhNonUTYv74IPx1KLjzGNbL4DDf0KpPO/x8frKZjyMA8tTk9xvbUZRlqf
sIIJUUZSMaz1qpG2rhuvOp1onsYUilg1n069ewtRu69wTx1DZbPOQ6g8DVK2
TzH09iBmaJ+Fgg8vP1wcFP2vYYF4A4JuluJaYh0urumDiijvd3K9hd/nqnAj
4Q17u3GQ+W4YC6NUAaZyTZCdHOFn7oetWUqUKnP1k2Syd3kz/06ZpUKfJTRp
MB8LDdapbsxMvQyYabYBs3AxZMPheiWugrolbRMMSvicjxY4T0hyCAmZ7yS7
4zNn/+Mzl75Pg+kcm8cUqzaygAPzWMBMY+Ycoc7sHxqzkkZ9llwqwXR69Fm5
iREztTdiNobqbMXsI8yv/RwTWlnMaj4r0r5XKtQtaUFJN/Qpf6IRpR0G9T/x
pU8R/tQsEExC3Rzpz3GmVWEe5Mv/HBVqr7FFQ4AiFz+CzaGXmCLIR1Nyhaj/
pijVn9GgrdeVKDdOjfo9zSj2pQFFVhtTZ+AkMlW2orCfkyjqqBO1XDQmnDOj
+C2T6ME7ebI3VCHlP/p0tFiARIdF6NpTBTIaA2zasAiVHw9h/5oY/MtKxtvf
JbBx7sZZ52Gs2CtOsYUPYPv3CfRS+6C44A8Ogo/GmcoQHXQhf6+ptOfWPKqe
MYMy7WdSt7QXefG+63VjDdp8yJDSY6sxY/Yz2PACLv9Vk2ZO0iLHc7o0Jy2Q
+J5vpG99QSR0LIjONm+kx40bSb4xhNSEeVz0czOJbgqhLSdCqOBICN045E8N
h/1pSttGar9uTK9dTGnCM0dydxOljhJJupamQ9eEi6B9owp8Yl3wrYhEJs9b
f2cWYHhHAQ6PVKLv7WsonRWhrAhJqh6nRt3LFWm3pAp5uhrSnFFpCv0mR995
3jp6WoPi1mlTQYYl6Z8ypXCniWSkOYUyTkrQ578yVNQxjnJ7b+NJZRlOXGqF
lcBTGD99izmnfyM9RIDKgkVpj4sahT/oxlLln9CxlOY9n0gp6jbkvGYq/SJJ
ao6RpexyXbq7qRADopVYE/4Fa6ouYpdeBnydmiGz+xoi5udB5OA7/Da9hcVB
hWh514If6w6jcVsskukmcpPt2a4Va1ie3nnm/kaZlcSNZRa6KkwyQZ+FmYqz
5PnizEdPltmUyzJ3tQlMKMOUqbycwDyvTGPOX4e5cAxzDbXDnHP2MYfkZunC
tqyjhcGJToUn360pnBQk6eS8IY3zO5HGRfqncSfvTGW513keIT6V9fmqskhj
VeYXr8p01ORZcLEsi/4jx+p1ea85bs9UEqeyglPSLDlNhlU2yDH7JY8g2fAK
j7cNIGG3FEmNlSVmZ0tHzUB+p12oVceTGpwXUtH1ZRRVvopMbX8jcN1fdKuq
kPxINyx+/MCNjTK0p1yLqk7r0hmtSTTNpxtJ1waRzHNsQ9uv+PZ4EJrPJMhR
Qob86uVJX1qLDhxxoopIRhWvptJVy3k0MmEB6Tktofr3+uSYb0DlwxNJ8XYb
tG5+hpeqAC3ZuReTlGPgOjcTnqJ3EOV4D4/WvoODSDKUT6bBP6kGWofF6Yy8
NP06rEFztltQ+GJLanLj6NlrHwr/upI0StZSktlaqlvoT9MrAsh3yhp6tWkN
ic9cQ0abQ2j/1RD6eieE3l8NJY+OULrxLZTelPLmfSiEQn+GkGxDIF1o30gv
PDeTkehsyro9h+IEltHA/+c7R59+NNiQ9lIbCpd0pLDU6dR815rKHznSOlN3
0ljZjIOnO2AeOArvdSX4fr8W6R/bkBdbBjGleiSMtmHx7i4ofB/C0uoxlCcu
RBqXxEnr1VhK3NCLhsSfkN0vRm/9plFeyHRy8l1GcatBrmHOFFw3j9RbxChv
jyQdeqpJLc8VqM1Ehb5FGtN9TSMaCjOl640crd0tR+WXlCnu/nhSlpEjA29l
au01obcPjOmZxET6e8GFEKVCtWWatHG6DU2s6sCJ+n5UG8nQypwL+Pf9BrQc
X2BpZC4OL63Aqk9fEJOVhN1b07GitQZcPoOdnSeMDm1F5+zfXF/JHy7rrTgL
9TNmA1rqTPGpGmv4J8Cc23s4nwJBJvuPN39T5ZlotQ5Lf01s8e3JzC92CrNY
kcYtfpvGBXSlcQNdEQ7ukxvtGzIWFe66tb/Qw8S/YK8Yv5P9dWWuQVuNO2mi
zPm5ODNvm8ms+64zG9hhx/iM7Jgf2TH7r7zHYTsWn2bL0rPByqvBPNOIDX9T
ZblXVNnJeaoso9QUFrfc8eL0Gmy7wE/8Y4RJIF2f2tKk6cFSeWqNMaHINauo
r9ufYs4G0/6aqVQsMoOY7AoqD+uC0NjvmPNemgJTWnEs7DOy04QpMFmQfj0W
pdsa2nT+2ABULP+h7YEClS/gJ6NvQuQlOpbKH7fjyvxOqMwVopXHbeiFjR2p
NE2hNTx+kPq0nE75r6G6CS5k2TuVsuvn04GZMvRzoRLZuekR2hog7vIaYQdH
4L5GhpyVFEmnzYBSeTvc/IkrXUpbQN/OzaCdx2aSqutC0hjlOYk+L0/rnKj6
SgBZFa+lRpMN1Ou/kerjNhKfXTC1pK4l85h19HL1BhrxW0W6m1ZTnPs6MnKZ
Qhq3ptIk99n0oVWbIpX1yFjNnFo39EFqxzBij4vRoqV9cKn5hQZRGbKu4SNn
fRHaMVmZeoMlaZ2nHC24pEOZDbw9ZfYcO198RVR6OqT2FGPpwFOM31CDdKNm
jAv5hi+lv+AbIESd0+TIWaUX9q6/UDpGnPpb3sN8Xjf+bhWk3GFnUhFwpb7F
CyjKZwlVy3hT+PL19HyZG9m/n04yz5ZQDi8fHi9n04HCFTS62oFk6xmt0vSg
iwKmNFRiQQb+U2mquSYN9IyjJZPsKWDHBFpTbkG+flNp+p9xlGM1nszvM+Lu
yVF00Vg6ucOMWnWLoCJXjVce33jedB2FAnfQF/MSoSsv4KPODYS0F8NyUT77
+vU56x/gR+cwWGOoM9N5Q2yXsCbr/q7BPHS1WaCXDqs0lmc+07RZm5QKc/3B
2wu/9Jmr8xQWvWEK6x4mFh+6i2sY2M4VLN3GGekIFvLtOO4Qr7TMPve+RWF6
oUehiOBhx/CmnELnPRMd+AzGF+nU9XIFst8493l9XEKBLwvO8GV8P3yZ+6k5
zPXKXFa+ew4TNZvONM4xZv/EnbnbLmPxu9exgxnLWHjDWJ4rTGLDa6ax+fxv
Mfi1HeWpwqTXKk9Rqbx5G2dDX+0WUFfBIrLZG0AtFtNo991Z5Ni+hFY68NPe
MSJUuVuDyjsmUlycDXmUuZPIO1ma8VeRinmMI1QmRccC5Kj0gjF9SdCl756G
FKzIiIVK03FjHpd/0SPxjQNYtnEYim5SdDBFm0y3j6PvKRModnQlyaWsph/V
G8hkgyn9r6Nzj4pp//9/koqSScV00UW36T5dZ++Z9+v9mq4mpbtuoosQQocO
oUMIIYT4dOgQkpCEZO8p5Aihw3BCxzWEOHFCCOE7v98fs9bMWnvW7D379Xw9
H4+/tuZfYhx9Q44N04Zi0D/6aB45BmvSXFFLQ4xpoQGYciYQRy8NxlbXBAy5
EYBtag9/sjJanaFwlBiF47Q1CZiolYqXxqTiFK8s9HkThcU3onGV32SUXyTY
sYBiEw3HXx/64T3Kou2lcWg5YhTuXC3EP7ScUHJhOFpfHol9t21wC3lIPRZ3
0+q/B6HFZw0sPDQEiwqFGHLzMW0QvqJLXYegz1MVFW18QAf99oWmhlyj9gvv
0Ikt76gis54uFJ2nRRMfUPGrx/Sv4h6auFITJx/bR+P3HqP9qVfohF2vqKbD
B+pzUBsflQ/QTfO10MXfEPPmiVB51hUDb0jxFOOPZo8DsWFDHOb+bo4VWtb4
8Y4YZx9qphm//EUbw97QggELBJ+xuOiJN5reDsZY9TVdz52MQ6UUBY4B+GNG
Iobt8cDEcG/U0RuPySYCzEs0xh0vnPC3y/qo8dIQjdSdHLnmPV2y4gfNaxdg
67MamjKZp2OHtdPsFek0pHApLYnZSLtbXEA4Pxh6qjKgeMg0aDcugG6jRMgc
5AB5rAiYMQ6QX2MObQcsoOaGCDr1GBBUSCB7lx/0TdICclcLBD+0IGvHCikn
3yDt5rdIBSMf8z/8+zkDh/l8xfFQtuDJTLbz9Uil8Qcjrp7dzXQ3NjAWc46Q
8IlHSKf1EZI9PBQ4/1CoMVWAj8s4aNYbB65bQ6Cvdy2sMSmCDuFa0DRdAW9t
V4BufwG06PlC1FEfGFjrC/s8ZXRUopw+2ZhDV/60xZzHdjhpeyAGbhiHob1h
+EtuKi48E4DrbULx9/kTUTF9FGbXmmPLUk88vF+CknkytI+OxsvnvlJDh0Go
0jbCrZGmWPrnGJy71weVq43xzRQhpnl54dulelgnGY5Wj21wWOInejjmK23Y
NRwnZA7CPzZqIWtkgivuT8HSjWnYFzUbE22CUfNhCM75EKfm7JG4ep4JJtfa
Y+1nxIob/hiXNBHzKp3x7V5XHFmFaPYUcN9ZigePRWBCwXj0nxOGJ7YlYMXd
MBxeNQEvz5mEx9R+MuizO97PleO0Of44ITgQu0MSMGCwr/q7fih7F4bO+n5Y
f1+KLbsj8IW5B+4844ND/UNwcJ2awVfYY8gYH5yrNMexa6xxTq43nhCPRFvt
0dhp5IR7JALstRqFwnMO6OD4hjb4fqaumsMwaHYT/XTsEl0ofk5rbG/Q2v/+
oYK3ffR+XD2NajtLtV3/oQ/wLA3rbaWlc7vonf8GoypiKHonjcaRmT+p1Q0t
XJ9vgiubumnhr300uWQovmzgaTXfQtf+2k139B+lFfeUtOCXB/SNmlHKV/dR
vaH6+KLeAU/+K8JmfzkaPPXA4GdeeM9oPL4wNMPrVZZ4Q+aD99bdodO7O6nF
OHVPM8epdUcj9Qt4RM3Uub6Z8Zr+L3swVs0up4uqDlAt+RlqEH0Dlui+gcqx
ulT83BYe5HuC4q0d5Eaqd/CXuZAzKh4G/MdC8S9jQZBhAz4lThBV5wRaARLo
nKyAElYBgtvjoK6nhhQsPUFc5x0lXUe2S1TzW5iCnhNsp3askvsmVNbcW6ls
lqxjSsb8ZDWGpTJEPF5ptzBAmRimrWz6n6Sp+29Jk/EM9ya7q9ZQONcadGts
YOB8OBTahwMzJxzm310DbaZrIcNwLcTdmguq8fNAGJIDTGMmtNIFUHQyE3ps
GWhpUefxGwPBY+/Tlf89od3HNfHEASm2HkbcsyUOT5wlWFPljz+fTUSBkytO
q/PCjtWhuG00wbBeOV68OxEvHLhHn5U9o/PytPBMgQvypuq5CQ3G6nteGMn5
4Q3DSPzriyaKVmrjWR8LfHZegAv9jbDb0w6petbMTwDK9Seg37osbPCbhY9s
f8EM+2iUmUfjwY9T0GCOCGP7nFAzWIaRqwiSWRSPLIpDs5nWuHWKLe6vY7Fm
9mPqtb6Ldj7Qxtf/jMV+tVOEv/NB14OIVqmB6t6KRe6bB74a4o10yjiU/2KL
sfn2uDKHoOykLVZEO6BpqAw7X1rhzGQ71FPn4UWKE8ZouiMX64/JkWK80uOD
5g4hWJ2gg8EP9PGHlTVWqLnRYbARWk2xw9yTgzBnqDYWfhmFtyffp5abntN+
q0GYUP2K+so/0ABXHbzsJMRObgxeOeWGxhcM1MxtiHcNbFHYeI0u/fsW3Xjj
Pd105gkdk/+arto8BC8M+5v+uv8RxbIfdHrgNcpW/kN/j/xKNZf/Ss+9WEcD
xx+lr4xWUgfRFnrtgppRuqvp/b2n6PFR92iqQhPjLg9BvRXqeS81RKLOZk+Q
K1ok/EOfzntOjy3WxuPDD9G2Y6doj+0D6n+ijm4SnaGuG9Sz8Os1OvPVbfp6
/msq+xpDp26dQvWrltF+bX8o2RwBHV5JoNocCO2eU0A8LhC0mpOASBJBfD8c
NGIlkHdKAoXpEhAm+IJdox+IJgSAKNUKmtOswGe+FVi2mTdVpH5ttNAyadI9
tJLtf/lU0r/9ZUP5BSuuUzWXz/l5lGld+InvC1irTHyRrez9qCsVtHlI+wfW
SyujR7NZV/Yw1jZtXFDWISLIP0QUmYdIr1kGNKemQ8fPNOAWKaBrnQLyjiug
0KYAcscthDhmPui2xYHPhzhIHJ4BWowC2p/HA9c2EYzP3YQnXh/B4sVgqvvU
BPf+a4Z+091w8TxPvB7ti/ER8ZirdtnZT0fj5LPuuDLFHzd2BqNMnoRRtf2U
c9PAaetMsOvJW9ru2Uc9uw0wdPFEbBiZjMQ4G5uu++DWY1IccT8cvwcPR+NR
hmgWbIvuvzriTQNn/BpBsMo2BVP0J2P41Jn46VE8+pyPR/0PGXhD3xl/u+OC
FxMAc81csMbYA6v/F4Lflf54Y34wjgxLQc/PvVRW/o1mjTJCM/cuGhzZS1/O
G4bLD6q9brYEy+aG4qAaFpNmybDWJxLzAoNwi3cI7stJxnvCePzxMwFJ1Szc
4WiGYyeMwVvvPHDB8ItU3tNGB8W9ozVlBtjPGOHZxfbYudgUXdeojzH1wvE7
zfD9R0tsF3ogu7KHLpr+kd6Zr4smbeZ4Y4gNXv1DjMd2W+O2bDs0LPXDMuFH
ajHjK31uPQI/+QlxqakZOixwxbMnjdBnwijU/ccB1/93Vc0xd6gy+iPNrKum
l1NP0U2Nt6lB9gY6PGcnVSnP0B2BefQ1bKA3VtXR/DIl7f63lX46+oZ+Of+a
xn3tp71/GOD11hf0hNMH2m6hj1NSPtGv/ZroeM8Ee9420Fc5ah8XvqMpJ3+n
tyyrqU75NWrh1ES5l620pfwJnTyvmrZvOE5Lgv6kS64chObqozCgfVe9OzOg
ZNlUqKzNAZ/WpZBmvwrSopeqeWM61DfOAPnoZEijQWA8jgGfx6nQbRcJTQci
od49GZruXSFBY0+S1nknicWopTJf4xVS4dV83ueIr7LcfrNS91C+svphO6+/
4DCfZd9/uuLgST5r0ne+4oFUmVg+QZkT5MSLwzYoO0dJlV0+9/ig/ebK7OH2
TfMvjm7686xFU3WKGOLui2HAQwwtZwgUCYn63AjUb/GDnGq1E5dJIH8jC66H
3aBlmQJqPsQDeTsV8q5PhbRvjsCscwCt4Y4QlJ5Pf7myjlq6VVGNkzYoLLfH
wf1BuMJwEA4M18akr1b4dJ0lVqj3plsGwR2fpJiWgDhElIBTXgzFWUvV3Jxv
g67fnPCROitm0/3RQnMiHjqeiFufzcJBde7oleCFle+DsdjtDX2T+YlmnBTg
7jlS9JEQLG4Lxx2xk/HmyFQMCpqDl5OC8TijwOyDk9C/0A2ZxV4Y/1GBVgdF
KL+sdrUZIdgvN8LcGCE6qz/XDjPD2EArXHDQA18zvrjfnMVpr8IxNzkQI54H
49y8RPQdRjDrkpqJ+6JQ/4oAL182xlmujvjg51B8263OZ701ZtmPxvdlplio
7YbP9Fyx+rEHznEMxCDLUXj4vjmmv3FHy5A+OuXFD7pZ7cLX20zwurY5Pv3D
CVW/yXBHlhwFXdH42yFrnMbbIVchwea/hyI26GPoOWv851cj/OI4CjuCnXDi
Xm08mj4UqaE5XjZ6TH24l/TufS30CN5N22MO0VsbVPR4x116J+ol/c9LB/ln
I1Bb7arDJS7YvMgUf6yzwq9LvVGlY4gXtYVYWOiM1W0vqQ//kYoXGOCwc81U
vlZFq9u+UueCGrr+RBM1vfOaDvNuppopKvpK9x1donWdFh3soEOHvKcGug40
4HcxrTsaSbN+LIXsMb9B7a1C8DtSADn75kPr6LVQEL8AtPTnA3d3AWS/nQUp
2rMgM3YxRJUpQEOo5vKAidAzQwidwaOhbYM9dK3XbLI76NNU8sGvyWhNuIwE
BijtWBNl3vQhfOmIVVyTUMhW9D7l80cv5MO/mSsrait4xf5/eOvWa1yZhphV
5IfzebcuMLm5GcqBTSVKWqmv7Ja9kYh35fEVqpF8wdka0mN2lDRrHCXFkADt
rgmQr50A2TIfMD7gDcxzb0i7KAWhlwzyD1qBSO0hBaf9IE3bGfqzx0GBaQZ0
voyDIjU/dY0Og9yWMDAV/EUH5d2ly16+o8sOj8W+By44bdc4LDxwjP5v3kX6
4H+DMXviCFSOMcE+mSfWzrbCYis7fPaZxXlyKXZ4Iq5fFos9H3zQ7qUfdn+I
QqVcjPmjvXDltjDsuvQv7dzRR7deGY5Bvz6kEe+fU3fRECw+aYLNKabo5++B
IUfFePWYL0Y/DkPrrf5IuGDc9l8SdhxksbmR4LD3kfjKxgXvR7ijAxOASc+8
sURTggH7FLjeOxYtfRJwcHkWTtcIRcc/JuCHkFTcqTMUa7boY99qKyzaYYjL
y0xQS+iM9BdvVMgkqDAMx4rzChSFTsDcS6nYWy7DJwWImZ0x2D/UCe9dcMdb
Ff64tcUP/3xG0HX7BKxuDMada8ajVuBkvHtYD28dEOD6L7aYNXsUij6Y4fw+
VwwIHol1dBTOsnXD+cWDUd9CB6Ue5jj42geqcBqgB/cLsL26n+bBD/rVxgTn
FgrQ5J0xxg53R2RE2KrjhifuKDBllx02uDvhSN9AvO+t3kXEFjdmUkz+3QR/
jDPHKyE+qGHwgyaqf2NjnAUOW9xOyzY8pNElOvgzs41utLlLldxgLNZVs/65
F9TstRZ+rNtETVp20NBrdbT3t1IY31kKBeanofLiFqCRZVBouxOcb6+CP2+t
grzuVWDdMgl6pCkQRFKg8FQKWIydBG13J0HnpjgQ5cZC3tYY6HE+Sjg8SkRH
jxKxaquEfN7ix/2+jRUaj1XeYscqC776saKKLrY/IoLvNvzEFhU8YkuOneWK
RZZ8ha6M6f2RwBrzO7ny1/vZnFO/chqpjXyeVjavse4O3zTUm+/o0lEGEU1l
zqO/+M6ph9iWP9dK49bXSCs03hONdb2k89R/RLgxARJNkqDpfQLkTnWCvCPO
UCcLUc+6HEquBYDd1UjQXzsWyHQP6K4aC91JFDpjwsFucTIwPm4grnGHprrl
kNL6mlZ++UzfNxjgkodjcOxqO9R6KMcln1/TAe8vNO4/M1ye9pamzP5KR3mP
wofSHlr+sY/uWm6AuU/cccNdHxTtG4db/zRDy6mWeGClF+a5jcS5uqNwk7on
5E/a6UbxA9q+QgvTFvygD+I0cd9HUyy5OxJ1L5ngsleumOrghMYarqg5DtFw
RCQWXIvG60fS8e2IJKxuT8FhXTMxYEg6RpzKwJ6GbFy0MQPzV0zDgt0LMHm1
L65dwmDV1DCsrNfHKh/1dTy1wne/hOK+pjD8+noKVv0ShTnTYhG8puNO32Q0
+JmCTdFz8C/TOMx+HY/uBdPRb2EkyrbF4rqR0/HdXIJlI+UofRSNXVaWuCva
FsVLJXhpigsenitGwaEgXOligjTXFOPtXXHP9PtUL6WLavrp4sO/7dHymDMO
8wrAY/OssGC/LT49Cli0dQwmzLHFph4Z9kbY4SYjZyxyUbv6stGokzYGvxxn
0DJIF4XP9XFYvQivHNHDNcsFOL7UDYdVCzFRcwxWDWVwwH4YJn43wDl+Lphv
94lOffKT3ig0xbsz3tEy9680SynAe33HqKKLo33f/6YD+47AMtlpOLzqDWTo
l0BrRAkIj+yAqD274M/Q/RA1shxqdFdBinr2tVashGbbWVAYMQvq7mVBycRU
NVunQc77VEi8/IVUf/5Ccrw/E402G07+myOvkf1aUlDD831aNkoNrUIu/I2r
Ms1+qbLzYw7b73ya80krZPq67/gxGXFcU7ILE3fJgc9q7pWozDOYfgMdXj7e
hq+eksPlbK9kcwZFSkTf3zBtDWWcvH8FV/E4k1XxmsryOaN5602PWXHDPDYt
8ITU+tteaefPImlFvw+k+Ks7oMAbcuRekPmSQn90EtjpO0GOphME3QgEwe5w
EO2eAHIHCq3HRZBt5gd2LyxAtdwdOgJl0E3dQTwmHMqWJ0P/0Sp4dOYrvW+k
iVWOavdr80TmIoORsbFY3S/Cr2Xu2BASjvSQIV57pr73E8S4JMcYlx0xxVh9
N/T/MxB9KxS4tSYJi3/a4bJBzrjRwB9D2h0w/ocT/qEbiNNm+GP/gkB0LE9E
6hqJjt+jsL4/E+N3hmKtPBy7Dk7Gj5cjcZ9/DLY9T0Nmazh+jYzA4adSsGzC
BDTzjET+7CQM4CKx9VkMBh2ciiqrBMyUJCMdMgertaejxYEsnPVhEfbXp2D+
yVTMuT0Pt52bjA+r0/D68nm4RzQJL7RPxoz5s/DF1on4Y0ISvi6ehsam4zHL
Te0xGpPweo4c9+0MVHt4LI6zjMADvTHofj0DpQXj8XVcJGa9SEcjtSsoI2zx
e4Yfrgy1wK3ZtrhEzYxZta5oW+ON2roT8LzCHvV1nHHTuUA0dbfH2jAX/DE7
GP/otcPx1BmVfv5YudQCpytt8Hgsi/P1R6Nxtjn67fHF+c+HI2c3Eg9ecsOu
SgMMKBiJ2j6eqKjtpTWnv1CzFnN0iP5C28cPwg97RuOSFCU9X3ye1qU8plKj
Wjic3Ajn7jwFsnw+lP++HOqDl8OSOyuhYlwJpFUWgbVwAQzEL4egsTmgpRMM
3L0gqN8TCCUXp0DprVRoCk0FsWUAZMr9oRv8QQEnGlWl5xvltY2NFtM3c72H
J5/u2HvudHOIgbSCOcwK2nhppfQdH76+lXf920ra9Kcu32p+gVFozePLProx
3D0fNvPOXlZwr4WNDIr2C19gz2sckLLh53fwFn7rmLS461xcWQ3Pjerimy/q
KFvXmyrbV9gqHzFSmfn28TJdJ5Q9XPM/2Z/CvbKmrztk+SNeEFf3F4QJ+UHa
3qk7a3cKMLMWQv6AI3DDRGAhDARxHQsW/0qBec1ClLc1iAylUM6MhNL1Iqhc
FqT2/DHAGY2C+loTsKszgaAT4ZB5exHM1N2v9udntLfhDT07Zgge51xRZO2J
duPD8eJvLiid5Y6t5lFYesAZ9QaJ0eLNeMzNDMb56p07/OZkvL8mDP+cFIW6
RlPxUrICPzDh+GnlFCT/i0LX5FgcG5+BK9UzVX5avXt/m4bluyIxPDhGna8M
fJkQjs40Et8tTMM86o+fWv2xyXsimq8JQUYyDi+fS8bKQ+OwhQ9F7vlkXBaf
gJxXMup1zkSD4ZNQzKVgcV82pvpGoFIUjc2rUnGYThwKrifggqBM7JgYi2+/
TsRhl9Ox+UgUtsTFYX7qFBR+i0eN04ko9JiGw0kGKq5PxRPn52JiziSsMU/F
tEcz0VsSj3Mvp+C9mizcSxQYZRiJxD4N32fY45w4N7w6xB+jwRIFIQ4oekTU
1+yM9//wwKrKMGQXM6ixjmK6fzKaObqh6VhvdKgLQ0bHAVurXHGLKAgzLM3w
+hVLLD7IYJqmDj7erIfzjonwk/wH5W9q4taN1thf8pZaL+qjAzZGWKXP0fYn
Z2jv7U56K+4cbBr0FxRyGrT+2TgQXB8HNcXB0GO+COTvi0BfazGEv8wE8Qo1
649Ogjw3KVg4xwNzkYWm8giofhkBdtMjICclFgbs4qCZiwFB9l0iau8glc53
SXXvZtnr1kpZ2oFDsqiDhsqSizf4ijV2yt6XJ/mcA2FsxeNoPmthBNebdE6i
m3CW1ehvZMLpPkal9yvbOj2Pi3quYkrww+nEa1FMgetDXsPuF9aiypYV/bWI
LUjMPK0I/8xkvZ3A6/tUMcIvocqiGV7KswO6Spo4XyZY+6vsi9s02ewDGbIN
p2fItrPpsokzTcj8f/XIumk6ROD3inApr0hp2HsivDgNjHtmQHVyAcQNuEDX
UxdQawYY+6od2SEEsmPGQH6ypbrTnEGRNxgqfnOHniIAbtlYyPMaCQWBI0E3
2gi0dMdBneMvMH/GGqhYc4EGX75GT/n8S98fcsRBo10wYmIIakh88Uolg8kl
8aj81xdFV2Q4PSoOC4aHYubjCdhfno5P/NUMMSQe37+fjkmGEej1VD1/IzJw
VlMEqn6NQ1FMpprJw/DexijU5jOw6XUozvsSjuLx6ch+9EeVRRAKXJNR9DkU
J6pdwetKOnYy4/G5OotLBqkZSTMavQ/HYntJBnprTcFXGulYe3keat6fiM1n
EzGGmY7t7kko+G8yrhszE3P+nYTj16bis9xs/N+xKXg4PQNL1ufgizHq97fS
0OBMtprr41GXS0K951Nx4/Z4fBqVjG0203DXzyj8Vh+PD9ZMxWQ1W2Wsi8Yj
29NR50Eg3uoOw7OTpmBUsRhvN0iw88sEnP7dHR999sYfEIn5+l64t8gPbwyJ
xmRTD2z61RsLPcLR094U384dg1ptfvjp+7+Um9tHd8aPxKC6z7Sg7ge9piPE
DutP1Hvidzqp2wRfupykHbSRzv95l2qGtMBPjw7Y3DCU9s2NA2uHidD+Zw7I
B6eD8dNCkE+YCvI3AaBvGADN90VQnuINlaYR0GXuA/27GKiOjQF9xyAoWj8J
eg8lQ53fJMjWfksSvd6SB/K3pMVtFNllZ0wcs0eTmkspMvHZFNn8lfkyC7NS
NstiMis+5Hm6RlrCJ34fxpZ/Hcq3jl/HiyyescK4E3xTgQGrv638NBdwm8s/
U8MZ363gs0IDOWbxc6biRg7PDKxn5deFfNHNdUzH3j2c4kUMk3KvgItqEPIt
Sb/zxuQc57NoE99wK10WdBNkZSlTZYPmr5CdP1cou9K2RnZk93CivGVIdiS0
ywZ/GUwOlTqSbPs3spKUd6RuxVsS4akHOY3TISVwBjw9WwCtP1lIa2Gg29wV
qv18QN7vDZylKdj9TxcUo4eC4O4n0q9lCXklliAfoVD3IUCxUAzZ+wC0soZA
W6sWdJZpwaSV22ndjTK6UKOWvptsj0+qnPB2iRxfR4ux64svTnGMxdFvbfD1
EEfc81sIDj5FcVVdILqFpeBvBwLwaaQCvzGTcfdzxJU6wVhZNwkdu8bh3tZw
zLVPx35ZKD6ziMBH3un4ylqGWUPlGLU6Fj82hGLhn5G4zCIdrxil4PJBqTj9
33l49K8UbL8yBS+Yz8Xbb1OwQCMNhbPn4o7eSSh/MwX9fObgtsXJuCdmMuqE
z0Lnw4k4fcokFLnNwpLWibjmWiLunDkLtZlYrBk1EUeETsPlNyLQ7EYULj6R
jiW+E9AyJBqn3E5HxZIQbEoMwyH7JuOw9f5o3hqCSrNEzFAAJt8IwLToRNT8
xQerbrGosIjCrBB3TN3gjUGnFbjJzx1n5XjhvBFh2HZChO7mrnjdfRwemm+C
xvWm+GCpL9q46eC9pXq4ZIkd3kr4SO8Z/qDZQhPc3Lqe3r9SSpmJJ2le5BYo
uX4AsiY0Q9v+ZGi5mQglmtMganoaRFWmQrVDOjT/R6B9E4GmG2Mhcb0M7DQI
1LV5gO4qD2i/7Q5pK2SQliqFuN4QaPKbCEXYS/KH9pKyil7yUFs96w1G5NCx
UeTeDR1ClukQoeEwotNaIDu7YLlsQ8gOmerGDKanoYq1lpxncryM+bS9dyWd
Ucl8Vud2Li0gi6+RHOKNp8iZsruNDPf4XzZzrS6fVfwPV3/7f3wzDGLj/P39
GPlFThhSyLa22fCMub4kx8CbXy+q8uuuWd8gEjgqNTbMVVbczVLudwiRnU+f
JKPdIbLIhEJZ+LNC2fGPq2W9dQISSiyJ9qarMkcvfSLfwJLijeUy76tvZBqn
bssCd7uTVu4j6R7/kXS+HwYlflFQJMuG+rbJ0JHjBXaDvSH/gj20e0mA2yOB
tMMSKDWxhyhmFJRbycF4lboPTLSh940npBW5Q1R/KLg+M4Lm8z9JZ/sPwi34
SWpqv4PWTG3aUeRG9/X8R3+4faSaNYaorfbAzBY9nFohQp8HAhzZNgr14yX4
6E9H3HhejH6JEWjL+eFEW4qK9gT89lCGdjqBqPU4GScuDsbMJePRc2kaWnxn
cOdQwDYuFlNXhaJdZjjO2ZqOYjVDrQ+ciPFfsnB9exQKtGLw6qtM/EUeo3aH
WJx/ZRrW/BOBVbuiMHxyBmb/EYkGc6NwWUAGNn9QZ2u3mt2S0vFHpQIb4kJx
9qnJeGlIEKYcCcGzH5Nxelsgdl4MwflTUnCTSI7ON4NwT00inmmWYUyAOusN
cWouYtH6H4rRibGoeCnGrXp+uEwzDF/tckaDI2K8tycEq4gLVs3yxIz4UHwz
1Bp1bthhsl0AcnsM0UdvFK74yxvDj+hggIEeLhzqgFkaN+nAvA7a1/+D7r3n
S+NVMqrxYC7tvK+e0y/jYNmZrSCICoTeRZMgtzcCLGA2tEoWgq50FiRuDwKf
4kAYoBJIDGdAdxcL7d8YaBouAWGBH4Q7S8D4Qzy0l0+E8gUZ4HPwLmmtf0/a
bIYCFesQl1ffZbf/N4LkrRWQGU6G5EnIaFJmZEBG5xgQjh1OLOt3yzx2b5ed
e1gpy/rN37do+gwuR0y5jqY/Tpfd/ofJa752WmwSw1t02DMakgR+wGYV3/d4
N1eSI2d144bw4hpHPu1lENu9WsK19Aq5giNr2er043yBVT7XdK+Kax/2B9vc
zLMdVgMS1Zb9TN+g7UyBtj7PLYpimKKzvHz5yNOqP7dJhZOPSfUFnNRTbEEm
1AvJl4ExpChai4y7/lP21EJIglYNJS2rh5CMPAsS5WVIzPZrE3cYS0QV74hx
zSviGvCRaHybBt0JM8Bu8XTo/c0VoqgrkAJXyP+FQN4QCioYD3WHx0L/ZxMQ
NnlAi+Yo0G8cBYyXHtR/EkLTn94gbBsOdXME0F07AjpejgBxgC7kjxkKPWXJ
8LAxkxqPn0ej8sup7YN79KTdc+ozQQ/zdplhrqYtntAKwhl3GbRMluPWz5Ow
5QWDDXcRX3tMwokVDC7cRpG1SMDpr33ws64UM0bH4Y5nnthn7YOMZwSWFARh
xJNxqIIpmHI/SM1aCvT5ZQqePBWEQbwCd75OxVIShLtmKrD152Q8Wx+Mut7q
/hg6BSsm+OMDXbVLXEjCbD/AEjVjxUTHY9pYP/T+KcOR22Jxe4AndqRKcGx4
FB464o12eSzqzoxB6/1ueH2TN173icDRxg6o6euKIzeMw0/nHFGR6YpeaePQ
cpc1XvWwx6rf5DiWMcMl7VY4/BhBO9DDkfME6Epdsf1oJ9Vf+ooOFw3DWzcL
qc2UIpqyuZpqJV0FRUsHiGfp0N6uheq9vBAS636FvsRIsP48GbKjIyH3YjRE
cVGQ8jMaNB75QUqvH3QekEDR38GgeBcMdo4h0BrLQFBfMAwsCoEi0wRQmcRD
cU88lB3UhntLtcE18hP5Igoglg+AxPTpkxFPDYj7UQHZ+VObCFQColthRA7r
6pBb8mBy3SWIbG2lJOzl77LxG3+XFRzaI2vrqGS4L8gmxtXy8m1irmL1Wa7Z
ZymnuHKUz2v5yuU1xvFkixZLokfyRfWrmPAfW3mLxPVsltZ7rqytm+m99fCU
sauI07q8g62u+8x11iSw/caebMfVHKYzxYQr2W/BZl82Y6LiNPlwLQHP3FvH
RJXNZlx/mShdHjlXarmnWnr19hgSGT2GNDtbk4nvR5HcoWZkt5c1+XWwIXk/
UpfEdWqSIy/Mid77EWTdYltS99Cc/Fc1iGj9EBLV/o+kdci/JOrVV1K/azJw
AVNA/2syNFU6QdkXJ2hdJAHXBj8QvPKBurNR0L/BFfqPuoK1uxuE/2UMXV0m
oPvbZ6JYaw0t6nuQecwKCgfs1f91GDx45wkVQ96QEue3pHr0G9KZg6AvnACV
IZsh/mYSNYifTKs+rqfl/c/oiaXdVDJcB6UBY1FcZ49OVoH4erMXPgpn0F1j
It6+44HXZvrh7rxITI13xL8HeaKu33hU7nDDnSV+qJGuzsIbH7xTI0VhVCyO
uOuNYeukOC02Dmd6eiCX6ofrN0eh3ycPtJFIsOFiNEorxJiT5odEFYMRzi54
55MnFoZPwKxkW3y6yAXdnUPRM8kG85aKUEtbgQvVbjvKzgXDY0JxhYENho9y
RKPmEFx43wJbim1wwM4f49NMsOGyKUazUjQwG4aaWwxw0//ckb19n3469pyO
rtVEpcY8Gu6fTw8Xl9Gr7Dlot28Dm9Jh1GLjOMj6GAzZNXOhbEYQqI4HQPXB
KIg6PhWYRavBdUIG5PmFgcpwBpRsArXPjYPSKwrQcAuFRIiAsr0ToGRXGCiW
JQLBJKh8mwjFGiHQuz0E7HKCoeKTuq/NNKA2QgNyIgPJ64MRJKzfluy+PI6k
cBPIoSe2JOCjAYlv0iPjt44g76cKyOWHBkR4wIhEtHuT8cspWV0gJ/sul8p+
3N4rU1jvl5HEjWxJYyrfQSfy4hX9bHfDU15srcNXL9dhex12c9ZGyKu6IiSJ
1se5zvLFvNDgGOdqXMjrXrRgBbc1TxOBiJdbp3PWSXG8Kt+e7ead2ewmTc64
3I6teHGLU638nS1zOMSplm7lVFavmc7f/djWORyvfG8t8w37Jq02fiuNeWZG
uoeYkze2o8nJpdZk7BNLYrJuDNHTNid/rBlDVCuFJMXFisREWJGGTivi0WpF
Qo9rk8Zea7Kp2Zy0Oowhsd6WZGDWK+Kz5SkxPvuSZKdJgPnbF4Q2ftCuGQLF
R4KhyDsEjA3cIEfqDgO16gzo+UGelnrfvHOCtLYxULB5DJApgyE/RAjWa8aC
qPIxyR/pBwWWQdB1ygDy7hlAh4sm9MZ1k7ozhkBCR0JiiyHU+44CsmEU5Laa
QK/TS1gg/Az9R0ZQiyMlVGzyP7rsSh2VjnhOTZ68pR9n6mHY9REYSo2x1dsb
A4Is8cE7O+xZHoDG6j3cY+CGZW6hWHfZEbuK3DA6NBzLL9jj5+cu+Mk2DMXx
TlgX4IGC1Egcs94R69XHZG6NQJu5tjh7rhMmbgrHlHZLdOiyw2GrFDgqcQwy
ZTa4/1ogZu0yxtclQkyjEiwI1UKHFzo4b6c1vvh4n4rWPKNrt2hh+ZHf6Zam
Cvpj5J809ZQ7nT/Bl5ZoZdGRN1aCxaV1ML3gIhScHAtd7TZqhvSAgvp0sLua
Dq1uU8Fidjx0/kwHLVcF1AfNhMTuhSCOnATdZwCaSxKguJiCa0ggdDlHwYPk
QPXOl0NNGYKxNkLvHoCSeIDSYxS4ElvItLKFrEe20BLcTBJzzpPMHZfIkd2G
JGzfKKJsExBtNy1yStOAbF3yRNYzeSh5MG0oWX/guWzYe0Mi+yAga88akV0u
JqSeFZCKucPJHJ0Q8mZ3AKnQCibK3rMyy4BLsuuyRlnpeSFfff+lL+c9iqlc
tIXjDm5h2rZ4nm7LWcg1D1GcvjpjGJ/R/Jwr3TOUF2zbyyd/TuNVMi1lu4aK
zwsaoaxfuoZXzG7kiwb5KXu7PZSiZVd4gaaBsn3hZV78o5OvG2ahjNL6hy++
9pAvvzmcV0jbuZpnAn6szy7Z/BHlstniQ7KnS7VJ/GEd8txTizzI3Cn759ge
WS/dLtPL2ieb37ZVptpQKuMv7JXdS94jG/x+r6x82UwZPbRKZnBpmWxjzTLZ
1F9yZcql+bI472qZedUfsoxLB2WqWbMbO9MXN+b8jGjs93lNov54Tepu3yCK
mRQG6ig0LQoH651SaIuRQbFtBkR1+kKBxA/qc1KhYoIDFDmYQs4BtTvIxkLl
fCMoSTeB8KPO0L3bCfT3OUHX45EQbmME+toeUPneFZqbXSAIpZCzUgx21zwg
VyKGrGQLyM+wAMWjMWDRZAUd2yxBVWwJIS6H4azFWTDa9ghaH4yiP05Y07Yj
kfSTfBJlZs+gTfs206XTi6jl7E00u7aWbjm9n64cf5Ae9PiLHl53nL43bKDz
LB7R5oZ6mnKGoyk3H9KAJ4eo1L5WnbHbNCNhO/Vx2EkHDp2lL47PpLvs5tGK
HTtobYsbPT7Wkw47N5W6JN2GugX3YV/RCOqamQ5dB9OhJfl3KPnKQDbHQHGN
mrdV9mDsbQ+JSfbQZ50OnEcc3ClcDR3rAKxHImS+CoPMtXMgszsbjPXSgAkM
hKj/RcKDMb6Q3RUChSXpELQ+BNo/uwCZGAz5BUFgsV8O8ho5lDRMgt4lk6FM
3dnykMnQ6/adKFIGCGf/naieLWvkXq1uzDk/s/H9SLW3xg0l88lw8mppnyzb
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

    "], {{0, 64}, {64, 0}}, {0., 1.},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Real32", ColorSpace -> "RGB", Interleaving -> False],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{64, 64},
  PlotRange->{{0, 64}, {0, 64}}]], "Output",
 CellChangeTimes->{3.773652372527542*^9, 3.773652432539543*^9, 
  3.773652490905544*^9, 3.7736530607645435`*^9, 3.7736531028125453`*^9},
 CellLabel->
  "Out[233]=",ExpressionUUID->"4521dfa2-c11d-486b-a941-d39f9bacb561"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["earth"], "Input",
 CellChangeTimes->{{3.7736523778975563`*^9, 3.773652378298544*^9}},
 CellLabel->
  "In[200]:=",ExpressionUUID->"2aa0f9cc-6bb2-4199-8bda-8aacbb1f1dad"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
4/7S2c1zl+6snr+5cu76pfV7t+483Nj8x6Xr/5hduanuGFVoh9oNi6dHNjqM
i6q2iYrqnmyuipUho8XxYfCo51/8NYDH3Pa3eDRJ8NT4tzuQZtYDoWzb8Vra
PBMcSlVqpox9l0yDF+ZX7qxd+nDlwp2VC/cWzt6eX7o1NnFlbuHW7Pzm8uqt
q5sPLly+t379o6s3Hly7+fD6zQeXN+5dvHJv9dLdxbXbEwvXu/qXO3tWdF0r
rfp5sbQ7No4XnySKYwpggYTnf/4amAiAJguCf/r5hx38YH2wIwXIti1b2myl
RvaOXormIX3POaV2emTy2vjs5ujU1dmlW/Mrt/uHVufPAsg/vXr9k43rH5v3
/csb/7hw+aO183fPrt1ZWr01NX9tbGbj9Mglg2lF2zEFgFdpp0vLuzJz5XFJ
AgeXwF0/+RnocKystp4L+pyn7l9/Gz90Z/bDHNGg1uBQgbX5gP3V14GMKJer
Ekl7W7pWegYvD05sTC/c6h9cm124tXb+w9W1e2vn7i2fvbW8cmtp5ebs3PWJ
6Y3JmWvDE+v9Q+dNg+c6jAtq3ZRaNyNXjgrEnVl5Ciwh9c9vHrSw2AWeA+5M
A21j+DH9dwsLC+iTl6V5EAdMQ8x32ezdf5JAzqtpmugfvd43DLB0vXfgfJdx
aXLm+tTc5uQssK9PzFwbmVwfHLtoGjzf3b9qMK12GFfU7TOqlmlZ43C1fKCo
tIVM49o7Bjz3MzA9Mwcp8wCQeXrqmymqLQTgpNa/gH97jgKwaECbwNBgafWT
d945RqXnKZSjBtPFTtOaxjDbYVoynl7rPn3O0LcKbtNae/dSs26uqWWmSTvT
0DxVJRsuLTflF7eRaVm2xzyef/E35sNYiHlSA/II6uPrfwP/NzIEh6SsLIAU
wzyDB65Xfv3bk64B1ITikrLO2saR5vYZjW5e3T6v7VjS6JaVLQty1Uxdw5hY
0sPJlZGA3MYH++Zbh212vbAVSM1e2jyx9Birn8DBp8C/E7+ePDpnnq0Dsljz
GORWpgcKw+rR15959oXf/uGd/e+52DvBffwIQcGxwSE0fzjZ3SP8sK3Hm385
9IuXfguFPrP9LIut+aid4+TtuPk/rX/K/KdYVjvb8tGALRglzWHyab4P1qtQ
c5sWbEY/Xsb+W6dyH285fTNau3WgYbE1sGbxXeV9NDdi9ofmgAj6dHOpvT0t
CtnpHkK2P/178UO+/RYAbwV5/Mo33eTvTEFvgYR+M1D8rQ70d5tZ/3/9v7L+
G9P63Os=
    "], {{0, 64}, {64, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag[
   "Byte", ColorSpace -> "RGB", ImageResolution -> {72, 72}, Interleaving -> 
    True, MetaInformation -> 
    Association[
     "Source" -> 
      "http://www.nasa.gov/multimedia/imagegallery/image_feature_329.html", 
      "URL" -> "http://www.wolframcdn.com/waimage/hset100/bfd/\
bfd2f0b50d1c55361012d905487ee181_v001s.jpg"]],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{64, 64},
  PlotRange->{{0, 64}, {0, 64}}]], "Output",
 CellChangeTimes->{3.773652378642581*^9, 3.7736524351525435`*^9},
 CellLabel->
  "Out[200]=",ExpressionUUID->"01fc955c-4622-445b-9879-75ce77e21103"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trained", "[", 
  RowBox[{"ImageRotate", "[", 
   RowBox[{"earth", ",", 
    RowBox[{"10", " ", "Degree"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.773652437256601*^9, 3.7736524390505505`*^9}, {
  3.773652500345559*^9, 3.7736525031745434`*^9}, {3.7736525503426733`*^9, 
  3.7736525507405434`*^9}, {3.773652634705544*^9, 3.7736526551226068`*^9}, {
  3.7736526890766015`*^9, 3.7736527372056017`*^9}, {3.7736527829265447`*^9, 
  3.773652808987544*^9}, {3.7736528529465866`*^9, 3.7736528621375723`*^9}, {
  3.773652942583604*^9, 3.7736529510285473`*^9}, {3.773653114818603*^9, 
  3.7736531323165708`*^9}},
 CellLabel->
  "In[236]:=",ExpressionUUID->"2bb44f95-d7e5-4f65-a5a7-ffd9002834cb"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJwsl3lYDe3/x0/7Xqd930iSkPRozplzv+/s2ZI9j91jyZ4eS/YeS0JISLZU
SBISaiYhSSrJ0Z4WRSXtKi1a/Ppe1++P+8zMdc0fZ2ben/v9elmv2T5vvaxA
IPhXefBn3uo9E3x8Vu+dr/i/i3Wrt4xz2iI3eOr6/+t/53XBV5jKEZdd4k6k
cEafbjLds8bxVmuqmOL5QpGXvkZS+Cd33i3wmMjbrICzu1Q+3q7mHROkm+KS
8vO4yHFoGG80s4Mr/lLNuf2txUtHhDDRW2QZ3zFNLnVGCjynas1ZXfZ3CZeW
cq1jZ3DK567yxcotLsreQbzwom2iq17m+IDfLpxwmZLI8bt/gqe3Nb8sXo4z
Egq5AHsfxnvibFEot4QPijDmi1fHc6EyhiIrixlMfkeAyOpyd0Icv1PUuiWa
8z7kkdga5sN3m3uLN9beFFevWC6OazVnHR8psKFBdeKX1QNio9MKbLepB2vC
7xdnx4wVR8YsY/Mu7BKPnrZR7CZKZltD5/KO3RP4r6JLrGTlU3a2eSybkfKE
za/9ym7Z9Y3dmfOFTYtTIgOLVMjb0cpk1dz9RPvqf+Sl+X6i928YicsPI/+F
hRH1H5/INL1ccmptLpm1r5QE3SolTxeUkiFm8hg9VR6ms+XR80cOd0bJo3Gy
PN5++Elqin6Sgd6fxM9TFnW7ZLF9oSx2XFJE0OrB+6OVYd2RRO6sSSC7d7wh
6zPiScqch+RYWTwp/G8DCR25inzw3EDin48kDzfYkFGJ9sSzRk7i7fuW3bdX
Q/KnOYEVWHixHX2vWcGvBGbVtFaueNM9JuhTOqM3QXl8XcQ3zmjSftZk0QL2
rM5/rK3WPraz4SBbo7aNrU8TstsPG7GrT8uzNGu/uHn3DrGycI84//MUsduN
LWKvfH+xXeCwREGBkkvlkEtMZZ8Bb/RPGM/kzRK1jvrm0h0j4UONNfjuyw68
kU+bi82YAFF3RPUz6T9+Lt1uGZzHwbDE6BMPOM/OJaI4DUveyHUoH74hNzG0
5KaL0TEl0U6To1zxAjc+LuYun+E8jvHNJ5zrxBCmNVTMMz8OiaJtc5nKc/7P
vMf4iAT5zzk7k6uclfZ6TrB6DxeUYMYImh+4FLs+ZXwLsznpgR2iunehTF3T
dJH88kgXx7uGvPR9IXNxS6BI8MSDkSYsYvSMj3N2y6x4q+t3GLuTQTzjYcy3
NujwQcWOvJeTt8irgfB17+eK6kiwqDI8kA8o9eA9r+xnoq8OTfDq/ItP2afC
B524KOqW9xOFxj7nK/XG8L7DR/J1756Pvz1CRuToD1Hd4b94v5FLubgp60V+
+Ud5t3IB3+FygnGs/1e0Km8J7/1lgohbeVXUPecgLzxDeCExZbr/WcgzMnxi
+OwvLkZG0ZzAMYqZHHKCr5wVzljFzhMz35aK8wvmiYXOcez643HsvIg7rHLA
CHHGyjHinVEzxb7Jo0VxfeDCTSNF6jN/sPOmFbNRZU3swMksSYDhB0ngpQ+S
2ROOkz2S4+Sg7HEy9EA2SRiXTeSL8slLvovMol0kqEcG1527SXhIN/H1FsBV
p5ucsu4g2ev7CLdGG8kq2tg2TB8b7zSQFWMbieWlDmI6dIB4JfeTnM1y8AnX
xpll2oiN0EXUNEVUJytgwjBlPLRWQSSjAtW/1JD+tyWOO1rCe8pQ/PK0hOng
agixxLcFQmQ/FeJvKyEuR6riLq+Ks/NUETFFDdHL1eA6Wg1t0VpILtRC/Ggh
JkxXwKYpSpAbPJ5VriHN7j+IUKGGXPlzn6D/PgkwjCX7fk4ktfcmkrMdE4nX
4jJ2rXc1+9a7ka0MSWT+9y3DU4/yXhFWolkJ+nzZEQPeY80Ddv3yB+wZ++fs
hgV72eglvuzoDfPZcI86TjkoiPf9uI43stjJ9BUIOK/Z6xLDz84U+WatFEVL
j3KVZ8fxdm1bRX5eSpzfb0cmbkN6YpCxASedMIRZO1GO7z4n5kL/URUxacGc
20dfLiPBj3fz7OUWvD7KBV2g/G1rjQRfmXeicPNMrtX9Kpch2sw5lvN8ZcYG
xvFWOW9V6CVyddPl7CRPObcgW6ZyB+UzcIgPb57vcvv9SVHAJ8KknJnI+AqK
mJQKKVe84i0XHrtB5BE8x6V7c0KC/BRZkXD5Y6bO2Z8PNaxxKY4wZIR+xxi7
dlOXoDO3OQ+nL1zG230ix/JQzkPfiAlKeMm4fihJdLyxVBS+NoOrjJvC+zXO
4T3HL+O6x9ryKcudRH4rvHjPvcsZaWoYZ6UZxziE+XOcpJbhNv7FSQc2i1yX
feYExhZ8a9Rhl9Cvc/nunTmM30ZDPtTuIe+5UUYkMPRJqHxsI8o5/sopbfPg
O7TczlRq1SSu+teZafWfJk72pWJB315xqNUwnnu7iA+Z7ij2HnKQ91gVyEkN
u0Suwlw2eXQue6DjE3s3YQGR3TefSD4sIIWHUsnXmhRycdNrcqBNF4FpuvgU
r4tJcwWorvlDjusL4DTUArtCzPGfjRWm2Zui9YgRbu8wRZGzFpaO00DmJ21E
3jPC5FsGKHxkDk//fuK5qIece/OHWL0RYGBXP/nVM0DULxuicqY+1uYYouSe
Kg6cVEayvhoCBApotZZD4BgFuLsbo3u7IfqXGwPWhqi6q4dLdw2gKdLDtjJd
ZAj08PRfDTxZo4GUNg2IrY1g+8YQ3ntMsMRfBct2qcE8Tw37DYW4pK+DSb56
WGYhROt4IZyIHup1DDFkqDGMak2BdxY4VGOBUT8ssGKEDXZOscFkBxuouivh
rxlKOAIlJB2OJ40R8eS6dzzp+DBDYuXoLgkaNlMympsmtnNgRAHT1V0uJFiL
M3Te8HEdD/jd4f7iDj1bcbH+cjHDVnMeWv8yvouG8UZHNTlhkz/nGf8fZzU6
OjFDYy3nqKLC2ITJ85UHTDjvy4+ZjNZQUWh2AeM8UYnxLA12MRqlwa+y0OIz
wj9zoTmyfOumcqb1u1AU+jON874RwXjp3RCFb//C+V69zbeuOsK1mk/lK4eq
8NItJxOsHs1xsXpzjXHd/5XJOD9RJE2o4Lpn5nMZTDynbJzIpeQcdvFz9uXr
xokZ5sBGpnj4FL7VYwfjnbySEQSK+QBtO97v5xuOi1yW6Hszlet238MVmw0R
rcqcybuujeLdLDRE3U01TNCG2SJmyDm+1fCxKGWNgyj690jOM+Uss2pJKs/s
2y7yFuzg7MbUMML2w5zd9DBR9J5qRnicd/Fo1OGlsZN47/1VjJ1SqShUfafY
t32aOP71IbHZi/Fiwc91Yo+IqWK7fSmijNYBxnO0l0j5rLI4/N96UfE6R7HA
+h4vuHiZt1pWwK3aMJRrPXeDu61+hAkqjGdtMqLZnLc6kt+5wSRrx3ky0vki
aW6pIZeFNWTZiBoizmklI763EMtfLcTgrBWGXbfC4ntDsMlOG1qRg1mh+pA1
+UMUZw8Qz7wBMlGulyRo/CGLNXuJ93tF2FYqolAyuKf+GuyAShmUCQTIGPhN
Yv7rJZ+0uknetD5ydV8viZrTQ+yX9pPYJf2k3u43cVhXS4I31BKq9I2MVFBC
1VAlLKEKmJ6ggdfPNSDzQg2XLZUwSVcJITMUUBKiiLIrilD2kkfGHHnMXi0L
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
Jzmboiap9A4nisNDifrSKHLzZR2JL/5CkloaCX4lkz3fnpKO38mkNTOd5Pqn
E5vQdGJkl0XMlmSRaQtySG5EHuk4kUfEbBmZbvqMMN+fkur0p4RomsNgnS3m
JY6B375aOA18x9weAb1/UZfys7XopsCh9PlbJTrgIkPLW3UpM0WRjo3vhEGW
Kh06WZO22QpoiqU6jRPo0vXjFanmIMM4+Anoftfv6LssoN76qlRhVzcCFivR
r9+16dkGWVp3Tpl2SYypq4ISTV2mSnsVjWjUHQXKvFKm2gpG9NR8ZTotV43O
OqVE06+0wD65D2mz2nDoUik+sw3It6jEu42luBnbjOYxeTj5vQjS0c3It/yJ
aoMumGQo0eDQt7j3Ogtfh39B4eYCVDaWYGpoCy6ul6U1Fb2InaRItzXJ0kVL
uzFSRpFqDGvDs/4f2P63LG07VYBTF4pwYXEHLI/eQ7HgKSJ6PsHOPhLMmjis
q5XiTlwYOp1j4Fz4AXIxSagc9RazvjbBZtYLrIvNgHx+K/b9isOI6cmwqK/E
7YUxsN3+FJ/f5sPGPwG8dgrMBvukcO1LvHr4Fl8aGzCn7yMOFeZDNbUbkjkp
MD+Rhg2XSyC/fwaGu86Gnf5GZPzSRrKmDmId9OCvpYt9P/RBNxvi5DMThFwx
gcjBBKvfGWDvHgP4XDODkYMQi5u1EH5AD2d+j8M0R2cILZ0RMOs12Wn/msyc
8Joky7xjA/9NZ+f1p7MVf3h2xooX7NSmF+w5o//EdUUbxbYffcRWLmmJVu03
eO8j5ZyRwY7EgO0jmPBDk0VSUy0+2vkr13p6nMjr0BsuNCud8T08nw/qiGHs
dv/D+yarMpVdUZyj0FlUnJTG9ZWcFdkFbORStmwVMQsFfNLaXUz5xTuMo6MP
eyhiAxvVe5gNLlnI7g93ZhfVT2Q15HYR+albydE9e4hVXBVJUZKS/QG1ZBGb
TG4LHxMP8XOit+Yd6X34guxenkI8x2WRNXpZRCc/gwzZX0De3SwkfnplZEdF
ErGITyIfvyeR21vHQfPHeKQ+nArfw33Ift2H1J/q9MJOPRolEdIKO2taLFWl
v5Vl6bKJejQoSZ0uHiqgE75r0GvORvSmqirNHGSUvPlm9GmFBq3L1aN/9xjS
gAJl2jvonklHdeipoYr0uYkGnWCjSbctlKPbV6nQ2EH2ORDQh8QjstRHQZ62
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
Z4K57p1gox2CCPqfJC4FSaJjiSRk1QqZMytkmyb/32kTmeulRPZtTSJ7NqYH
62kzoBU0A0GnfjHx84Kwaf/FTF4r4IUJH5rnVeDk3M7erG1nTufamc1yJYzu
00DH+TnYcHkAuc9H8OC4PPV4CtAHeWHq9VYn0zsyhEN8enRfl0rPKtK+bcr0
fIs+dZ38ikc3vkFbQoxqRyOR/yQWdK0e2VP8IbwxGMdXluL4rQ/YdfsT7P1z
ICQWhlZeDJ6MF+BZshhJ7ZekUwPK1A5DCpxrRPW/L6Jtr9VpoFiDMq0NKeG3
X7iiLkS9XnwKvPcVcRd7UVEkSr3mcVDzTEfSzUbIZb/H3e/+8J+bCdu1/nhj
EgrJN9lI/16Fdwp1WNv7HUtbxSh8nTgtuSJLflXKZL5ahTQFtGi/hy4VKuuR
83dDStpoSR5DFvS/XaAuM9BgByN/R9D+icW022IxtWtb0uOzC+h/fyygc98X
0s0LRHEPiFYetaZ31VYU0mFFAgkgw6XLyNVsGd3tWUb3/9Oji2v0SfuWEb2O
FaTYEzwal5KlAxai5K8rQaquyiTDOfAGnxaU24/hbskrOEh8xKKeeJgMh+HN
v0n42lqMH0u5bJWv586uH3utv6Hor0HszBUmZ5lB3FeaQKOnOG1I7MEr4Z/Y
cF6ESgOG4NU+iWoRSRr+3QPHjXwAuyQU8X1wWiAUaltzEaPpDgMlH2g8TMHW
pwlQtfqMRQ8bkPBGnjwcp1D/zOm0KSYQr6TikTyzCtmt8bignoP89g4YHk2C
ZH0+epy6EfbFD6u0Y6FuUQWlHa9xVsEbpyMzoH8uGKuKogGuRzf9nYrcK3nY
9pjjyd8+Ilw+CHVjyVhhKQW7eXI4uEcbMYXTcXSdDuT368BDQAG6cYq4eVAF
45mCsHQUhC5PGIfn83E6no+69XwI/BHBftscwYbXRDCvtU7sbOZjFmbqxIru
aMFYTQuTjbpYX6uE7zkq2HxPGQW2fMhFSqNzrwIiXvHgls1Dzr+CcH/bwvwX
d7P7636yJaWDsCsbxarl0uR5ZRh8GQHK4fzQVmwAGXeGsalBipJGNMiay0VX
/hz6rUWUineJUaXrFIr2iEYLd1bGrvXoupiCFeoZ2H7rC8zXZ2DFjSxIt3Yh
36sQ80bLoeE/gN53Xjgc9xHHlsajT7obh7b3o7tfhHamitOhs5Kk/FKVeNc6
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
JVjb
    "], {{0, 64}, {64, 0}}, {0., 1.},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Real32", ColorSpace -> "RGB", Interleaving -> False],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{64, 64},
  PlotRange->{{0, 64}, {0, 64}}]], "Output",
 CellChangeTimes->{{3.7736527338805428`*^9, 3.773652738275545*^9}, {
   3.7736527837945476`*^9, 3.7736528093855457`*^9}, {3.773652853841544*^9, 
   3.773652862658542*^9}, 3.7736529516795464`*^9, {3.773653108185545*^9, 
   3.773653133222547*^9}},
 CellLabel->
  "Out[236]=",ExpressionUUID->"c1285a36-90c3-4dc7-9822-32782fc91b9f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ColorReplace", "[", 
   RowBox[{"earth", ",", 
    RowBox[{"Blue", "\[Rule]", "Gray"}]}], "]"}], "//", 
  "ImageRotate"}]], "Input",
 CellChangeTimes->{{3.773652554743595*^9, 3.7736526270545454`*^9}, {
   3.773652749350571*^9, 3.7736527744505806`*^9}, {3.773652835325605*^9, 
   3.773652846954543*^9}, 3.773652959087599*^9},
 CellLabel->
  "In[227]:=",ExpressionUUID->"3b270d2e-adfa-46c1-b882-aa32f52b2377"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
nhQThCIGoaKjY3nMpILyysZP7oIy37h8MzW9UKFUA+OP7twdGlkan9zQaAen
Zi6dGl4tEqmKBMprN7/Y2LxzaesugH/tzO3J2a2uk2d0hnl7p8AfwA8oNajR
3n5hau1ETra6qfFkU1WTsbqhii9KZaaRoxPTecL0DLGy3iSWKGiMFIA2XV2n
1I2tVVWNCoXeaBy4dfPuyuL5ogJRKAaLxeKjoqPxEZERJCojnkOOYZ88NQkA
/vju5/IanaM7IpRA/fDDD+/d+2ztzFZ7x1hn99zA4OrY5AVgR9bTv3B+4875
jY+WV69fuvLJ6trtqbkt88m1praZve+5/Lj8Dx5y7uxZLSxq6emYOqXv6als
aJNWirMFzFhOdW0zgcjKzi1rax9YWb20de2DOx9/un7halNTR0lJVZfp5OL8
2uf3v+wzDyYnciLwEVFRxMoqmVgsVtap6pS6+fnT9+9/2ds3EYKlMZPy5DVN
dz++d/fj+zduAAzZGp9e7z252DuwfGb9w+u3Pl9ZuzE9e2l2fuvS1v21sx9O
zlxp712qaRj5/R/fecj/xwMgAD90W39ffPlPPSdPV1Z2tOv6Z8xjg/Udg6pG
ZbGAQUrEhFGQIVHhxPhKRUv/qanxyXm1zlij1Gt1pr7e4atbtzYvbr3//j9P
9U+JCqSsuHgKiTAzPjY2MKSQ1yzOLFzdujEyvgxEGmRahqRCvbR88f3bn3SZ
hk6vXFpeuazR9SZzhbLa9u6+uWs37i6tXJqavji3cH3+9PXZheud5iWdaba4
tOOJJ595YH++sQMAg0/rB4kIm+r6ju7u5TZ134xpcLSuZbxRrROX8hKz8AQG
EhXNy5Hx8mSoMGosky0UV5fLGtoMfT09Y8ODs6unL/b0DrfozR0t5oaqquJ0
Tnu9sqFCppBKr25cWpxf7e4ZDyPEAxGaQmWanj1v6hxaWt6Ymjo/OnYmgVXA
zpCWV7UbOiYuXrmzuHx5dOzc2MTF/qHV/sG1noGzHb1rtIQiK6ttQX8LPxRi
2blALSpAorJODm2YmscHtV1jqtZJjbalrCw7OYuAp6PQFMDLZOZXObghfQJx
qekF7R2nKuRqva5bpTRUyTUZGUUSca2+sbmuVFSZlaEtKakuKBgwGAZ7B1ZX
ztYqtF5wQlpWmbhcm5omKBDUTM1uADxpNYyptYOTs9daO2ZPDp4GyLO8em1x
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
SNzr
    "], {{0, 64}, {64, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{64, 64},
  PlotRange->{{0, 64}, {0, 64}}]], "Output",
 CellChangeTimes->{
  3.773652558234544*^9, 3.773652627577586*^9, {3.7736527502485714`*^9, 
   3.7736527755465784`*^9}, {3.773652844199577*^9, 3.773652847370544*^9}, 
   3.7736529598615437`*^9},
 CellLabel->
  "Out[227]=",ExpressionUUID->"bbc4bc74-87cc-4830-8ac0-846661e533cd"]
}, Open  ]]
},
WindowSize->{1920, 997},
WindowMargins->{{-8, Automatic}, {Automatic, -8}},
FrontEndVersion->"12.0 for Microsoft Windows (64-bit) (April 8, 2019)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 203, 3, 28, "Input",ExpressionUUID->"93d8efce-b5c1-4ab6-84da-b37a0ac5b8fd"],
Cell[786, 27, 24418, 569, 255, "Output",ExpressionUUID->"8e588a36-18a7-400b-aa07-0878b24e34ac"]
}, Open  ]],
Cell[25219, 599, 4815, 106, 106, "Input",ExpressionUUID->"bc02aa7a-22f6-4a1d-a74a-653addc50471"],
Cell[30037, 707, 566, 13, 28, "Input",ExpressionUUID->"e7a20602-7eeb-4a8e-bc9b-aa03c10e5cb8"],
Cell[30606, 722, 325, 8, 28, "Input",ExpressionUUID->"18608ae9-4961-49ee-bc48-01c661dda598"],
Cell[CellGroupData[{
Cell[30956, 734, 1393, 27, 124, "Input",ExpressionUUID->"9532a2dd-f5f0-4a70-bfce-b7bb035e7cad"],
Cell[32352, 763, 25682, 519, 88, "Output",ExpressionUUID->"c989f305-d313-440d-8906-24a6bd0ebea8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[58071, 1287, 507, 10, 28, "Input",ExpressionUUID->"a7046324-32a8-4fa2-9f25-032f2ec05800"],
Cell[58581, 1299, 25630, 518, 88, "Output",ExpressionUUID->"df061863-627c-4ca0-bc3a-e24b4f46ca7c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[84248, 1822, 215, 4, 28, "Input",ExpressionUUID->"3683877b-9e6a-44ac-8b15-96e436d5785c"],
Cell[84466, 1828, 61743, 1017, 81, "Output",ExpressionUUID->"4521dfa2-c11d-486b-a941-d39f9bacb561"]
}, Open  ]],
Cell[CellGroupData[{
Cell[146246, 2850, 182, 3, 28, "Input",ExpressionUUID->"2aa0f9cc-6bb2-4199-8bda-8aacbb1f1dad"],
Cell[146431, 2855, 11815, 201, 81, "Output",ExpressionUUID->"01fc955c-4622-445b-9879-75ce77e21103"]
}, Open  ]],
Cell[CellGroupData[{
Cell[158283, 3061, 716, 13, 28, "Input",ExpressionUUID->"2bb44f95-d7e5-4f65-a5a7-ffd9002834cb"],
Cell[159002, 3076, 61429, 1012, 114, "Output",ExpressionUUID->"c1285a36-90c3-4dc7-9822-32782fc91b9f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[220468, 4093, 442, 10, 28, "Input",ExpressionUUID->"3b270d2e-adfa-46c1-b882-aa32f52b2377"],
Cell[220913, 4105, 11660, 197, 81, "Output",ExpressionUUID->"bbc4bc74-87cc-4830-8ac0-846661e533cd"]
}, Open  ]]
}
]
*)

